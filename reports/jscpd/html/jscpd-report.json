{
  "statistics": {
    "detectionDate": "2025-09-10T18:55:56.302Z",
    "formats": {
      "python": {
        "sources": {
          "tests/unit/xai/test_xai_struct.py": {
            "lines": 168,
            "tokens": 1654,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/signals/test_signal_survived_mutants.py": {
            "lines": 196,
            "tokens": 1491,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/risk/test_risk_survived_mutants.py": {
            "lines": 262,
            "tokens": 2027,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/core_aurora/test_core_aurora_survived_mutants.py": {
            "lines": 432,
            "tokens": 3044,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 32,
            "duplicatedTokens": 222,
            "percentage": 7.41,
            "percentageTokens": 7.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/api/test_api_survived_mutants.py": {
            "lines": 496,
            "tokens": 3607,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 32,
            "duplicatedTokens": 222,
            "percentage": 6.45,
            "percentageTokens": 6.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/integration/oms/test_order_lifecycle.py": {
            "lines": 632,
            "tokens": 4914,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 57,
            "duplicatedTokens": 524,
            "percentage": 9.02,
            "percentageTokens": 10.66,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/integration/oms/test_concurrent_orders.py": {
            "lines": 311,
            "tokens": 2345,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/aurora/governance/models.py": {
            "lines": 23,
            "tokens": 118,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/aurora/governance/gate.py": {
            "lines": 87,
            "tokens": 1455,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/aurora/governance/alpha_ledger.py": {
            "lines": 46,
            "tokens": 495,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/policy/gates/parent_gate.py": {
            "lines": 91,
            "tokens": 1017,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/execution/exchange/__init__.py": {
            "lines": 44,
            "tokens": 220,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/execution/exchange/unified.py": {
            "lines": 417,
            "tokens": 3788,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 5,
            "duplicatedTokens": 98,
            "percentage": 1.2,
            "percentageTokens": 2.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/execution/exchange/gate.py": {
            "lines": 169,
            "tokens": 1911,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 22,
            "duplicatedTokens": 278,
            "percentage": 13.02,
            "percentageTokens": 14.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/execution/exchange/error_handling.py": {
            "lines": 561,
            "tokens": 4663,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/execution/exchange/config.py": {
            "lines": 374,
            "tokens": 3106,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/execution/exchange/common.py": {
            "lines": 318,
            "tokens": 2651,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 20,
            "duplicatedTokens": 273,
            "percentage": 6.29,
            "percentageTokens": 10.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/execution/exchange/binance.py": {
            "lines": 214,
            "tokens": 2530,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 37,
            "duplicatedTokens": 510,
            "percentage": 17.29,
            "percentageTokens": 20.16,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/exchange_smoke/binance_smoke.py": {
            "lines": 318,
            "tokens": 3222,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/exchange_smoke/binance_live_check.py": {
            "lines": 206,
            "tokens": 1394,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_xai_schema.py": {
            "lines": 86,
            "tokens": 595,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_xai_init.py": {
            "lines": 44,
            "tokens": 254,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_xai_decision_trail.py": {
            "lines": 253,
            "tokens": 2129,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 35,
            "duplicatedTokens": 313,
            "percentage": 13.83,
            "percentageTokens": 14.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_xai_alerts_min.py": {
            "lines": 8,
            "tokens": 67,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_xai_alerts.py": {
            "lines": 57,
            "tokens": 502,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_universe_init.py": {
            "lines": 33,
            "tokens": 185,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_unified_exchange_breaker_smoke.py": {
            "lines": 28,
            "tokens": 256,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_trap.py": {
            "lines": 78,
            "tokens": 611,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_tools_ssot_validate_min.py": {
            "lines": 92,
            "tokens": 476,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_tools_ssot_validate_codes.py": {
            "lines": 30,
            "tokens": 273,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_time_invariant_order.py": {
            "lines": 7,
            "tokens": 84,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_timescale_to_ns_more.py": {
            "lines": 12,
            "tokens": 123,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_timescale_to_ns.py": {
            "lines": 13,
            "tokens": 131,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_timescale_normalizer.py": {
            "lines": 15,
            "tokens": 143,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_tfi_complete.py": {
            "lines": 613,
            "tokens": 5144,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_tca_latency_kappa.py": {
            "lines": 16,
            "tokens": 134,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_tca_init.py": {
            "lines": 37,
            "tokens": 246,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_tca_identity.py": {
            "lines": 294,
            "tokens": 2217,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 186,
            "duplicatedTokens": 1268,
            "percentage": 63.27,
            "percentageTokens": 57.19,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_tca_hazard_cox.py": {
            "lines": 48,
            "tokens": 633,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_tca_hawkes.py": {
            "lines": 31,
            "tokens": 358,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_tca_canonical.py": {
            "lines": 50,
            "tokens": 849,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_tca_api_backward_compat.py": {
            "lines": 68,
            "tokens": 593,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_tca_analyzer_v1.py": {
            "lines": 245,
            "tokens": 2125,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_tca_analyzer.py": {
            "lines": 621,
            "tokens": 5085,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 80,
            "duplicatedTokens": 532,
            "percentage": 12.88,
            "percentageTokens": 10.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_ssot_validate_core.py": {
            "lines": 12,
            "tokens": 131,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_sprt_stability.py": {
            "lines": 54,
            "tokens": 435,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_sprt_glr.py": {
            "lines": 385,
            "tokens": 3576,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_sprt_compat.py": {
            "lines": 76,
            "tokens": 702,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_sla_gate_kappa.py": {
            "lines": 21,
            "tokens": 188,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_sim_local_tca_and_determinism.py": {
            "lines": 170,
            "tokens": 2672,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 21,
            "duplicatedTokens": 199,
            "percentage": 12.35,
            "percentageTokens": 7.45,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_sim_local_sink_ttl.py": {
            "lines": 24,
            "tokens": 155,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_sim_local_sink_coverage.py": {
            "lines": 270,
            "tokens": 2351,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 77,
            "percentage": 2.96,
            "percentageTokens": 3.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_sim_local_basic.py": {
            "lines": 57,
            "tokens": 756,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 122,
            "percentage": 22.81,
            "percentageTokens": 16.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_sim_adapter_complete.py": {
            "lines": 211,
            "tokens": 1749,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_signal_init.py": {
            "lines": 26,
            "tokens": 145,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_shadow_broker_old.py": {
            "lines": 732,
            "tokens": 5443,
            "sources": 1,
            "clones": 29,
            "duplicatedLines": 526,
            "duplicatedTokens": 3793,
            "percentage": 71.86,
            "percentageTokens": 69.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_shadow_broker.py": {
            "lines": 660,
            "tokens": 5163,
            "sources": 1,
            "clones": 33,
            "duplicatedLines": 892,
            "duplicatedTokens": 7047,
            "percentage": 135.15,
            "percentageTokens": 136.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_run_live_aurora_complete.py": {
            "lines": 364,
            "tokens": 3324,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 50,
            "duplicatedTokens": 684,
            "percentage": 13.74,
            "percentageTokens": 20.58,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_router_sim_local.py": {
            "lines": 12,
            "tokens": 137,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_router_new.py": {
            "lines": 326,
            "tokens": 2323,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 40,
            "duplicatedTokens": 246,
            "percentage": 12.27,
            "percentageTokens": 10.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_router_decide_expected_edge.py": {
            "lines": 91,
            "tokens": 1032,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_router_backup.py": {
            "lines": 532,
            "tokens": 3931,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 68,
            "duplicatedTokens": 640,
            "percentage": 12.78,
            "percentageTokens": 16.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_rotation_tail_quick.py": {
            "lines": 24,
            "tokens": 295,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_rotation_retention_lastline.py": {
            "lines": 29,
            "tokens": 258,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_reward_manager_v1.py": {
            "lines": 312,
            "tokens": 2623,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_reward_manager_trail.py": {
            "lines": 256,
            "tokens": 1965,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_regime_manager_quantiles.py": {
            "lines": 15,
            "tokens": 123,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_regime_manager.py": {
            "lines": 122,
            "tokens": 1031,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_regime_init.py": {
            "lines": 33,
            "tokens": 185,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_position_fsm_v1.py": {
            "lines": 373,
            "tokens": 3221,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_position_fsm_complete.py": {
            "lines": 446,
            "tokens": 3235,
            "sources": 1,
            "clones": 26,
            "duplicatedLines": 370,
            "duplicatedTokens": 2674,
            "percentage": 82.96,
            "percentageTokens": 82.66,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_portfolio_optimizer_smoke.py": {
            "lines": 15,
            "tokens": 186,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_pipeline.py": {
            "lines": 389,
            "tokens": 3023,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 84,
            "duplicatedTokens": 638,
            "percentage": 21.59,
            "percentageTokens": 21.1,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_pfill_config.py": {
            "lines": 68,
            "tokens": 697,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_order_logger_ns.py": {
            "lines": 39,
            "tokens": 304,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_order_lifecycle.py": {
            "lines": 118,
            "tokens": 904,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_ohlcv_fetcher.py": {
            "lines": 63,
            "tokens": 585,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_observability_init.py": {
            "lines": 17,
            "tokens": 72,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_obi_complete.py": {
            "lines": 361,
            "tokens": 2764,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_no_network_calls.py": {
            "lines": 21,
            "tokens": 199,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_normalizer_ts_unit.py": {
            "lines": 8,
            "tokens": 74,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_metrics_exporter.py": {
            "lines": 259,
            "tokens": 2471,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_logging_init.py": {
            "lines": 25,
            "tokens": 140,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_lifespan_init.py": {
            "lines": 178,
            "tokens": 1710,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_idempotency_store_ttl_overwrite.py": {
            "lines": 20,
            "tokens": 196,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_idempotency_store_ttl.py": {
            "lines": 28,
            "tokens": 287,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_idempotency_store_edge.py": {
            "lines": 18,
            "tokens": 150,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_idempotency_store_basic.py": {
            "lines": 55,
            "tokens": 567,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 54,
            "duplicatedTokens": 564,
            "percentage": 98.18,
            "percentageTokens": 99.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_idempotency_fills.py": {
            "lines": 127,
            "tokens": 851,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_execution_router_v1.py": {
            "lines": 628,
            "tokens": 5290,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_env_config_guards.py": {
            "lines": 311,
            "tokens": 2136,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 36,
            "duplicatedTokens": 254,
            "percentage": 11.58,
            "percentageTokens": 11.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_enhanced_router_v1.py": {
            "lines": 250,
            "tokens": 2081,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_enhanced_idempotency_partials.py": {
            "lines": 292,
            "tokens": 2369,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_enhanced_circuit_breaker.py": {
            "lines": 259,
            "tokens": 2059,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_converters.py": {
            "lines": 349,
            "tokens": 2911,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_composite_sprt_unit.py": {
            "lines": 16,
            "tokens": 132,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_composite_sprt_coverage.py": {
            "lines": 394,
            "tokens": 3139,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_composite_sprt.py": {
            "lines": 464,
            "tokens": 4107,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_circuit_breaker.py": {
            "lines": 288,
            "tokens": 2248,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 214,
            "percentage": 10.42,
            "percentageTokens": 9.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_ccxt_binance_complete.py": {
            "lines": 474,
            "tokens": 3984,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 24,
            "duplicatedTokens": 212,
            "percentage": 5.06,
            "percentageTokens": 5.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_aurora_api_lite.py": {
            "lines": 92,
            "tokens": 880,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_alpha_ledger_patched.py": {
            "lines": 247,
            "tokens": 2089,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_alpha_ledger_hardened.py": {
            "lines": 145,
            "tokens": 1133,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_alpha_ledger.py": {
            "lines": 391,
            "tokens": 3201,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/unit/test_absorption.py": {
            "lines": 554,
            "tokens": 4009,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tools/test_validate_strict_and_dedup.py": {
            "lines": 67,
            "tokens": 649,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tools/test_validate_canary_logs_smoke.py": {
            "lines": 25,
            "tokens": 300,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tools/test_seed_synthetic_flow_determinism.py": {
            "lines": 16,
            "tokens": 154,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/tca/test_pfill_monotonicity.py": {
            "lines": 45,
            "tokens": 703,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/system_validation/test_e2e_xai_completeness.py": {
            "lines": 19,
            "tokens": 249,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/system_validation/test_e2e_maker_taker.py": {
            "lines": 23,
            "tokens": 267,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/system_validation/test_e2e_latency_perf.py": {
            "lines": 20,
            "tokens": 173,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/system_validation/test_e2e_governance_promo.py": {
            "lines": 18,
            "tokens": 215,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/system_validation/test_e2e_denies.py": {
            "lines": 25,
            "tokens": 216,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/security/test_safe_mode.py": {
            "lines": 544,
            "tokens": 4284,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/risk/test_portfolio_kelly.py": {
            "lines": 27,
            "tokens": 326,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/risk/test_lambda_orchestrator.py": {
            "lines": 21,
            "tokens": 440,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 103,
            "percentage": 28.57,
            "percentageTokens": 23.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/risk/test_lambda_invariants.py": {
            "lines": 21,
            "tokens": 240,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/risk/test_evtcvar_fit.py": {
            "lines": 32,
            "tokens": 311,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/research/test_replay_adapter.py": {
            "lines": 257,
            "tokens": 1917,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 42,
            "duplicatedTokens": 372,
            "percentage": 16.34,
            "percentageTokens": 19.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/research/test_optuna_objective.py": {
            "lines": 222,
            "tokens": 1753,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/research/test_optuna_coverage.py": {
            "lines": 253,
            "tokens": 1772,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/reasons/test_reason_normalization.py": {
            "lines": 42,
            "tokens": 508,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/policy/test_parent_gate.py": {
            "lines": 79,
            "tokens": 786,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/policy/test_enr_gate_live_emit.py": {
            "lines": 29,
            "tokens": 323,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/performance/test_order_throughput.py": {
            "lines": 332,
            "tokens": 2526,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/obs/test_metrics_exposition.py": {
            "lines": 55,
            "tokens": 540,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 200,
            "percentage": 32.73,
            "percentageTokens": 37.04,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/metrics/test_metrics_summary.py": {
            "lines": 97,
            "tokens": 972,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 7,
            "duplicatedTokens": 89,
            "percentage": 7.22,
            "percentageTokens": 9.16,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/logs/test_rotation.py": {
            "lines": 16,
            "tokens": 179,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/logs/test_order_logger_schema.py": {
            "lines": 29,
            "tokens": 314,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/logs/test_concurrency.py": {
            "lines": 26,
            "tokens": 319,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/integration/test_xai_chain.py": {
            "lines": 226,
            "tokens": 1831,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/integration/test_xai_audit_trail.py": {
            "lines": 631,
            "tokens": 4404,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/integration/test_run_live_paper_loop.py": {
            "lines": 269,
            "tokens": 2009,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/integration/test_runner_observability.py": {
            "lines": 316,
            "tokens": 3765,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/integration/test_pre_trade_expected_net_reward_gate.py": {
            "lines": 60,
            "tokens": 524,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/integration/test_p3d_live_dashboard.py": {
            "lines": 186,
            "tokens": 1387,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 69,
            "duplicatedTokens": 671,
            "percentage": 37.1,
            "percentageTokens": 48.38,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/integration/test_p3d_hardening.py": {
            "lines": 223,
            "tokens": 1601,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 37,
            "duplicatedTokens": 355,
            "percentage": 16.59,
            "percentageTokens": 22.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/integration/test_observability_summary.py": {
            "lines": 364,
            "tokens": 2728,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/integration/test_governance_integration.py": {
            "lines": 300,
            "tokens": 2702,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/integration/test_governance_gate.py": {
            "lines": 388,
            "tokens": 3083,
            "sources": 1,
            "clones": 14,
            "duplicatedLines": 180,
            "duplicatedTokens": 1578,
            "percentage": 46.39,
            "percentageTokens": 51.18,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/integration/test_full_b2b7_pipeline.py": {
            "lines": 354,
            "tokens": 2755,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 42,
            "duplicatedTokens": 348,
            "percentage": 11.86,
            "percentageTokens": 12.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/integration/test_e2e_integration.py": {
            "lines": 431,
            "tokens": 3296,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/governance/test_ledger_persist.py": {
            "lines": 293,
            "tokens": 2242,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/governance/test_gate_transitions.py": {
            "lines": 83,
            "tokens": 703,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/fixtures/mock_exchange_factory.py": {
            "lines": 618,
            "tokens": 5156,
            "sources": 1,
            "clones": 12,
            "duplicatedLines": 526,
            "duplicatedTokens": 4520,
            "percentage": 85.11,
            "percentageTokens": 87.66,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/fixtures/exchange_fakes.py": {
            "lines": 223,
            "tokens": 1891,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/execution/test_sla_guard.py": {
            "lines": 11,
            "tokens": 138,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/execution/test_sizing_orchestrator_effect.py": {
            "lines": 78,
            "tokens": 803,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 31,
            "duplicatedTokens": 334,
            "percentage": 39.74,
            "percentageTokens": 41.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/execution/test_sizing_kelly_min_notional.py": {
            "lines": 38,
            "tokens": 452,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 11,
            "duplicatedTokens": 132,
            "percentage": 28.95,
            "percentageTokens": 29.2,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/execution/test_size_zero_deny.py": {
            "lines": 47,
            "tokens": 625,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/execution/test_routing_decisions.py": {
            "lines": 28,
            "tokens": 371,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/execution/test_rebate_mode_toggle.py": {
            "lines": 43,
            "tokens": 516,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/execution/test_post_only_unavailable.py": {
            "lines": 53,
            "tokens": 644,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 5,
            "duplicatedTokens": 89,
            "percentage": 9.43,
            "percentageTokens": 13.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/execution/test_post_only_sim.py": {
            "lines": 20,
            "tokens": 373,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 10,
            "duplicatedTokens": 270,
            "percentage": 50,
            "percentageTokens": 72.39,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/execution/test_portfolio_correlation_effect.py": {
            "lines": 99,
            "tokens": 1152,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 116,
            "percentage": 15.15,
            "percentageTokens": 10.07,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/execution/test_min_notional_tick_lot.py": {
            "lines": 20,
            "tokens": 328,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/execution/test_low_pfill_deny.py": {
            "lines": 43,
            "tokens": 551,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 5,
            "duplicatedTokens": 89,
            "percentage": 11.63,
            "percentageTokens": 16.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/execution/test_invariants.py": {
            "lines": 76,
            "tokens": 1027,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/execution/test_edge_budget_signs.py": {
            "lines": 19,
            "tokens": 259,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/execution/test_cvar_gate_evt.py": {
            "lines": 28,
            "tokens": 353,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 85,
            "percentage": 28.57,
            "percentageTokens": 24.08,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/execution/test_cvar_feedback_stub.py": {
            "lines": 33,
            "tokens": 451,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 11,
            "duplicatedTokens": 132,
            "percentage": 33.33,
            "percentageTokens": 29.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/execution/test_capture_eta_routing.py": {
            "lines": 76,
            "tokens": 798,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/execution/conftest.py": {
            "lines": 106,
            "tokens": 848,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/events/test_late_ack_and_partial_cancel.py": {
            "lines": 49,
            "tokens": 665,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/events/test_events_rotation.py": {
            "lines": 16,
            "tokens": 171,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/events/test_events_emission.py": {
            "lines": 62,
            "tokens": 846,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/e2e/test_trade_flow_simulator.py": {
            "lines": 471,
            "tokens": 3759,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 86,
            "percentage": 1.91,
            "percentageTokens": 2.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/api/test_overlay_io.py": {
            "lines": 45,
            "tokens": 443,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/api/test_ops_endpoints_readiness_stable.py": {
            "lines": 33,
            "tokens": 300,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/api/test_metrics_export.py": {
            "lines": 60,
            "tokens": 387,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/api/test_basic_endpoints_new.py": {
            "lines": 316,
            "tokens": 2506,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 70,
            "duplicatedTokens": 619,
            "percentage": 22.15,
            "percentageTokens": 24.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/api/test_basic_endpoints.py": {
            "lines": 90,
            "tokens": 755,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 70,
            "duplicatedTokens": 619,
            "percentage": 77.78,
            "percentageTokens": 81.99,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/api/test_auth_and_rl.py": {
            "lines": 86,
            "tokens": 779,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "skalp_bot/scripts/run_live_aurora.py": {
            "lines": 5,
            "tokens": 64,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "skalp_bot/runner/__init__.py": {
            "lines": 6,
            "tokens": 16,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "skalp_bot/runner/run_live_aurora.py": {
            "lines": 587,
            "tokens": 5618,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 200,
            "percentage": 3.75,
            "percentageTokens": 3.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "skalp_bot/integrations/aurora_gate.py": {
            "lines": 53,
            "tokens": 615,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "skalp_bot/exch/ccxt_binance.py": {
            "lines": 415,
            "tokens": 3759,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "skalp_bot/core/utils.py": {
            "lines": 19,
            "tokens": 420,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "skalp_bot/core/ta.py": {
            "lines": 45,
            "tokens": 625,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "skalp_bot/core/signals.py": {
            "lines": 298,
            "tokens": 3465,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/xai/__init__.py": {
            "lines": 30,
            "tokens": 123,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/xai/schema.py": {
            "lines": 95,
            "tokens": 608,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/xai/logger.py": {
            "lines": 115,
            "tokens": 898,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/xai/alerts.py": {
            "lines": 250,
            "tokens": 2408,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 24,
            "duplicatedTokens": 374,
            "percentage": 9.6,
            "percentageTokens": 15.53,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/utils/timescale.py": {
            "lines": 8,
            "tokens": 113,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/universe/__init__.py": {
            "lines": 18,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/universe/ranking.py": {
            "lines": 207,
            "tokens": 2432,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 187,
            "percentage": 5.8,
            "percentageTokens": 7.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/universe/hysteresis.py": {
            "lines": 90,
            "tokens": 795,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/tca/__init__.py": {
            "lines": 22,
            "tokens": 114,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/tca/types.py": {
            "lines": 170,
            "tokens": 1267,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/tca/tca_analyzer.py": {
            "lines": 571,
            "tokens": 5165,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 36,
            "duplicatedTokens": 230,
            "percentage": 6.3,
            "percentageTokens": 4.45,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/tca/latency.py": {
            "lines": 114,
            "tokens": 709,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/tca/hazard_cox.py": {
            "lines": 244,
            "tokens": 2617,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/tca/hawkes.py": {
            "lines": 197,
            "tokens": 1897,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/tca/fill_prob.py": {
            "lines": 78,
            "tokens": 798,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/tca/edge_budget.py": {
            "lines": 240,
            "tokens": 2108,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 218,
            "percentage": 7.5,
            "percentageTokens": 10.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/sizing/portfolio.py": {
            "lines": 182,
            "tokens": 1800,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/sizing/lambdas.py": {
            "lines": 236,
            "tokens": 2318,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/sizing/kelly.py": {
            "lines": 663,
            "tokens": 4010,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/signal/__init__.py": {
            "lines": 10,
            "tokens": 31,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/signal/score.py": {
            "lines": 204,
            "tokens": 1730,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/signal/leadlag_hy.py": {
            "lines": 353,
            "tokens": 3634,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 20,
            "duplicatedTokens": 127,
            "percentage": 5.67,
            "percentageTokens": 3.49,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/signal/fdr.py": {
            "lines": 193,
            "tokens": 1674,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/scalper/trap.py": {
            "lines": 232,
            "tokens": 1870,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/scalper/sprt.py": {
            "lines": 103,
            "tokens": 930,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/scalper/calibrator.py": {
            "lines": 108,
            "tokens": 1085,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/risk/sizing_orchestrator.py": {
            "lines": 246,
            "tokens": 3045,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/risk/portfolio_kelly.py": {
            "lines": 82,
            "tokens": 742,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/risk/multipliers.py": {
            "lines": 71,
            "tokens": 1018,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/risk/guards.py": {
            "lines": 271,
            "tokens": 2059,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/risk/evt_pot.py": {
            "lines": 273,
            "tokens": 3118,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 112,
            "percentage": 5.49,
            "percentageTokens": 3.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/risk/evtcvar.py": {
            "lines": 76,
            "tokens": 922,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/risk/cvar_gate.py": {
            "lines": 13,
            "tokens": 160,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/risk/cvar.py": {
            "lines": 370,
            "tokens": 3859,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 112,
            "percentage": 4.05,
            "percentageTokens": 2.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/regime/__init__.py": {
            "lines": 21,
            "tokens": 83,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/regime/page_hinkley.py": {
            "lines": 152,
            "tokens": 1039,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/regime/manager.py": {
            "lines": 144,
            "tokens": 1237,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 187,
            "percentage": 8.33,
            "percentageTokens": 15.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/regime/glr.py": {
            "lines": 119,
            "tokens": 1050,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/observability/__init__.py": {
            "lines": 8,
            "tokens": 17,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/observability/metrics_bridge.py": {
            "lines": 158,
            "tokens": 1286,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/market/websocket_client.py": {
            "lines": 252,
            "tokens": 1969,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 238,
            "percentage": 8.73,
            "percentageTokens": 12.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/logging/__init__.py": {
            "lines": 6,
            "tokens": 31,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/logging/anti_flood.py": {
            "lines": 230,
            "tokens": 1894,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/ingestion/sync_clock.py": {
            "lines": 232,
            "tokens": 1654,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 26,
            "duplicatedTokens": 310,
            "percentage": 11.21,
            "percentageTokens": 18.74,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/ingestion/replay.py": {
            "lines": 342,
            "tokens": 2760,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/ingestion/normalizer.py": {
            "lines": 304,
            "tokens": 2545,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/infra/idempotency_store.py": {
            "lines": 42,
            "tokens": 477,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/governance/sprt_glr.py": {
            "lines": 275,
            "tokens": 2622,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 20,
            "duplicatedTokens": 472,
            "percentage": 7.27,
            "percentageTokens": 18,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/governance/reward_manager.py": {
            "lines": 234,
            "tokens": 2017,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/governance/composite_sprt.py": {
            "lines": 794,
            "tokens": 7549,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/governance/canary.py": {
            "lines": 174,
            "tokens": 1277,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/governance/alpha_ledger.py": {
            "lines": 514,
            "tokens": 3579,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 162,
            "percentage": 3.89,
            "percentageTokens": 4.53,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/features/__init__.py": {
            "lines": 10,
            "tokens": 32,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/features/tfi.py": {
            "lines": 247,
            "tokens": 2200,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 14,
            "duplicatedTokens": 188,
            "percentage": 5.67,
            "percentageTokens": 8.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/features/scaling.py": {
            "lines": 411,
            "tokens": 4767,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/features/obi.py": {
            "lines": 169,
            "tokens": 1738,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/features/microstructure.py": {
            "lines": 345,
            "tokens": 2769,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 20,
            "duplicatedTokens": 127,
            "percentage": 5.8,
            "percentageTokens": 4.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/features/absorption.py": {
            "lines": 391,
            "tokens": 4264,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 220,
            "percentage": 4.6,
            "percentageTokens": 5.16,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/execution/__init__.py": {
            "lines": 29,
            "tokens": 91,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/execution/sla.py": {
            "lines": 167,
            "tokens": 1180,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/execution/sim_local_sink.py": {
            "lines": 364,
            "tokens": 3997,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 48,
            "duplicatedTokens": 432,
            "percentage": 13.19,
            "percentageTokens": 10.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/execution/sim_adapter.py": {
            "lines": 60,
            "tokens": 714,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/execution/shadow_broker.py": {
            "lines": 350,
            "tokens": 2964,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/execution/router_v2.py": {
            "lines": 433,
            "tokens": 4956,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/execution/router_new.py": {
            "lines": 136,
            "tokens": 1007,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 29,
            "duplicatedTokens": 353,
            "percentage": 21.32,
            "percentageTokens": 35.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/execution/router_backup.py": {
            "lines": 490,
            "tokens": 3767,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 146,
            "duplicatedTokens": 1219,
            "percentage": 29.8,
            "percentageTokens": 32.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/execution/router.py": {
            "lines": 430,
            "tokens": 3038,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 29,
            "duplicatedTokens": 353,
            "percentage": 6.74,
            "percentageTokens": 11.62,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/execution/partials.py": {
            "lines": 121,
            "tokens": 1148,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/execution/latency_predictor.py": {
            "lines": 37,
            "tokens": 443,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/execution/idempotency.py": {
            "lines": 81,
            "tokens": 501,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/execution/execution_service.py": {
            "lines": 145,
            "tokens": 1862,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/execution/execution_router_v1.py": {
            "lines": 651,
            "tokens": 5548,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/execution/enhanced_router.py": {
            "lines": 361,
            "tokens": 3167,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 217,
            "percentage": 6.09,
            "percentageTokens": 6.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/config/__init__.py": {
            "lines": 24,
            "tokens": 100,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/config/schema_validator.py": {
            "lines": 346,
            "tokens": 4230,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/config/production_loader.py": {
            "lines": 514,
            "tokens": 3860,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/config/loader.py": {
            "lines": 405,
            "tokens": 4548,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 258,
            "percentage": 4.94,
            "percentageTokens": 5.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/config/hotreload.py": {
            "lines": 153,
            "tokens": 1314,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 258,
            "percentage": 13.07,
            "percentageTokens": 19.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/config/api_integration.py": {
            "lines": 183,
            "tokens": 1025,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/canary/canary_system.py": {
            "lines": 387,
            "tokens": 3270,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 16,
            "duplicatedTokens": 176,
            "percentage": 4.13,
            "percentageTokens": 5.38,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/calibration/icp.py": {
            "lines": 335,
            "tokens": 3930,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/calibration/drift.py": {
            "lines": 268,
            "tokens": 2334,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/calibration/calibrator.py": {
            "lines": 491,
            "tokens": 5903,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 5,
            "duplicatedTokens": 87,
            "percentage": 1.02,
            "percentageTokens": 1.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/aurora/pretrade.py": {
            "lines": 162,
            "tokens": 915,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/aurora/pipeline.py": {
            "lines": 484,
            "tokens": 4855,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/__init__.py": {
            "lines": 16,
            "tokens": 83,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/validate_canary_logs.py": {
            "lines": 274,
            "tokens": 3127,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/ultra_simple_mutator.py": {
            "lines": 357,
            "tokens": 2234,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 266,
            "percentage": 8.4,
            "percentageTokens": 11.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/test_production_config.py": {
            "lines": 112,
            "tokens": 691,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/testnet_diagnostics.py": {
            "lines": 370,
            "tokens": 2934,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/ssot_validate.py": {
            "lines": 193,
            "tokens": 1632,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/simple_mutator.py": {
            "lines": 249,
            "tokens": 1983,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 266,
            "percentage": 12.05,
            "percentageTokens": 13.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/session_summary.py": {
            "lines": 210,
            "tokens": 2130,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/seed_synthetic_flow.py": {
            "lines": 152,
            "tokens": 1432,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/run_live_testnet.py": {
            "lines": 138,
            "tokens": 881,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 82,
            "percentage": 9.42,
            "percentageTokens": 9.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/run_canary.py": {
            "lines": 118,
            "tokens": 759,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 82,
            "percentage": 11.02,
            "percentageTokens": 10.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/run_all.py": {
            "lines": 113,
            "tokens": 1313,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/replay.py": {
            "lines": 82,
            "tokens": 498,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/order_analysis.py": {
            "lines": 251,
            "tokens": 2148,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/mutation_test_standalone.py": {
            "lines": 125,
            "tokens": 869,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 48,
            "duplicatedTokens": 378,
            "percentage": 38.4,
            "percentageTokens": 43.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/metrics_summary.py": {
            "lines": 205,
            "tokens": 1708,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/metrics_exporter.py": {
            "lines": 282,
            "tokens": 2511,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/live_feed.py": {
            "lines": 304,
            "tokens": 2391,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 32,
            "duplicatedTokens": 206,
            "percentage": 10.53,
            "percentageTokens": 8.62,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/lifecycle_audit.py": {
            "lines": 21,
            "tokens": 145,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/gen_sim_local_first100.py": {
            "lines": 15,
            "tokens": 77,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/generate_replay_data.py": {
            "lines": 82,
            "tokens": 649,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/e_validation.py": {
            "lines": 273,
            "tokens": 3204,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/dashboard_launcher.py": {
            "lines": 133,
            "tokens": 838,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/coverage_summarize.py": {
            "lines": 46,
            "tokens": 521,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/consolidate_session.py": {
            "lines": 171,
            "tokens": 1544,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/config_tracer.py": {
            "lines": 217,
            "tokens": 1614,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/config_cli.py": {
            "lines": 341,
            "tokens": 2432,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/build_version.py": {
            "lines": 86,
            "tokens": 720,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/binance_capabilities_dump.py": {
            "lines": 309,
            "tokens": 2298,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/auroractl.py": {
            "lines": 650,
            "tokens": 6448,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 302,
            "percentage": 3.38,
            "percentageTokens": 4.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/apply_overlay.py": {
            "lines": 84,
            "tokens": 656,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tools/acceptance_attest.py": {
            "lines": 244,
            "tokens": 1894,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_universe_ranking.py": {
            "lines": 28,
            "tokens": 436,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_universe_hysteresis.py": {
            "lines": 39,
            "tokens": 397,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_unified_exchange_adapter.py": {
            "lines": 407,
            "tokens": 2957,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 153,
            "percentage": 3.19,
            "percentageTokens": 5.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_skalp_bot.py": {
            "lines": 800,
            "tokens": 7293,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_sizing_portfolio.py": {
            "lines": 160,
            "tokens": 1330,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_sizing_live_integration.py": {
            "lines": 234,
            "tokens": 1918,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 212,
            "percentage": 9.4,
            "percentageTokens": 11.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_sizing_kelly.py": {
            "lines": 965,
            "tokens": 8113,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 52,
            "duplicatedTokens": 498,
            "percentage": 5.39,
            "percentageTokens": 6.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_sim_local_sink.py": {
            "lines": 662,
            "tokens": 4718,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 104,
            "duplicatedTokens": 696,
            "percentage": 15.71,
            "percentageTokens": 14.75,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_signal.py": {
            "lines": 98,
            "tokens": 751,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 48,
            "duplicatedTokens": 378,
            "percentage": 48.98,
            "percentageTokens": 50.33,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_risk_guards_live.py": {
            "lines": 181,
            "tokens": 1898,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 38,
            "duplicatedTokens": 590,
            "percentage": 20.99,
            "percentageTokens": 31.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_reward_manager.py": {
            "lines": 104,
            "tokens": 1104,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_profile_overlay.py": {
            "lines": 43,
            "tokens": 645,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_pretrade_models.py": {
            "lines": 42,
            "tokens": 569,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 16,
            "duplicatedTokens": 250,
            "percentage": 38.1,
            "percentageTokens": 43.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_order_counters.py": {
            "lines": 69,
            "tokens": 582,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_ops_endpoints_auth.py": {
            "lines": 137,
            "tokens": 1352,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_metrics_summary_details.py": {
            "lines": 41,
            "tokens": 524,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 7,
            "duplicatedTokens": 89,
            "percentage": 17.07,
            "percentageTokens": 16.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_lifecycle_correlation.py": {
            "lines": 45,
            "tokens": 695,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_lifecycle_audit.py": {
            "lines": 19,
            "tokens": 256,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_ingestion_sync_clock.py": {
            "lines": 77,
            "tokens": 594,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_ingestion_replay.py": {
            "lines": 140,
            "tokens": 1776,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 28,
            "duplicatedTokens": 428,
            "percentage": 20,
            "percentageTokens": 24.1,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_governance_guards.py": {
            "lines": 42,
            "tokens": 690,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_execution_sla.py": {
            "lines": 31,
            "tokens": 372,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_execution_router.py": {
            "lines": 336,
            "tokens": 2786,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 89,
            "percentage": 2.68,
            "percentageTokens": 3.19,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_execution_partials.py": {
            "lines": 47,
            "tokens": 636,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_execution_idempotency.py": {
            "lines": 91,
            "tokens": 732,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_exchange_adapters.py": {
            "lines": 163,
            "tokens": 1355,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 153,
            "percentage": 7.98,
            "percentageTokens": 11.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_error_normalizer.py": {
            "lines": 13,
            "tokens": 131,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_config_schema_validator.py": {
            "lines": 197,
            "tokens": 1876,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_config_loader.py": {
            "lines": 281,
            "tokens": 1631,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_composite_sprt_top.py": {
            "lines": 3,
            "tokens": 0,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_composite_sprt.py": {
            "lines": 253,
            "tokens": 1919,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_calibration_icp.py": {
            "lines": 582,
            "tokens": 4552,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 32,
            "duplicatedTokens": 332,
            "percentage": 5.5,
            "percentageTokens": 7.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_aurora_event_codes.py": {
            "lines": 36,
            "tokens": 359,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_api_validation.py": {
            "lines": 175,
            "tokens": 1196,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 7,
            "duplicatedTokens": 68,
            "percentage": 4,
            "percentageTokens": 5.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_api_integration.py": {
            "lines": 194,
            "tokens": 1496,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 7,
            "duplicatedTokens": 68,
            "percentage": 3.61,
            "percentageTokens": 4.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/test_api_dependencies.py": {
            "lines": 224,
            "tokens": 1492,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tests/conftest.py": {
            "lines": 18,
            "tokens": 119,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "scripts/run_replay.py": {
            "lines": 349,
            "tokens": 3630,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 391,
            "percentage": 8.6,
            "percentageTokens": 10.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "scripts/run_mutation_tests.py": {
            "lines": 328,
            "tokens": 2323,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "scripts/run_live.py": {
            "lines": 286,
            "tokens": 3203,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 56,
            "duplicatedTokens": 726,
            "percentage": 19.58,
            "percentageTokens": 22.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "scripts/nightly_automation.py": {
            "lines": 512,
            "tokens": 3931,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "scripts/local_pretrade_ping.py": {
            "lines": 60,
            "tokens": 391,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "scripts/generate_xai_demo.py": {
            "lines": 63,
            "tokens": 516,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "scripts/generate_orders_from_candles.py": {
            "lines": 107,
            "tokens": 1025,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "scripts/generate_final_go_no_go.py": {
            "lines": 466,
            "tokens": 3767,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "scripts/generate_e2e_report.py": {
            "lines": 135,
            "tokens": 1000,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "scripts/generate_coverage_snapshot.py": {
            "lines": 266,
            "tokens": 1788,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "scripts/deploy_checklist.py": {
            "lines": 684,
            "tokens": 4764,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "risk/manager.py": {
            "lines": 102,
            "tokens": 1179,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "risk/fallback.py": {
            "lines": 76,
            "tokens": 626,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "research/optuna_search.py": {
            "lines": 166,
            "tokens": 1943,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "research/online_optuna_orchestrator.py": {
            "lines": 273,
            "tokens": 3019,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "observability/codes.py": {
            "lines": 130,
            "tokens": 1095,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "exch/errors.py": {
            "lines": 58,
            "tokens": 571,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/__init__.py": {
            "lines": 9,
            "tokens": 12,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/types.py": {
            "lines": 441,
            "tokens": 4082,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 23,
            "duplicatedTokens": 305,
            "percentage": 5.22,
            "percentageTokens": 7.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/schemas.py": {
            "lines": 47,
            "tokens": 396,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/reward_manager.py": {
            "lines": 189,
            "tokens": 2001,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/position_fsm.py": {
            "lines": 270,
            "tokens": 2010,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/order_logger.py": {
            "lines": 382,
            "tokens": 4375,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 20,
            "duplicatedTokens": 304,
            "percentage": 5.24,
            "percentageTokens": 6.95,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/order_lifecycle.py": {
            "lines": 33,
            "tokens": 291,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 88,
            "percentage": 18.18,
            "percentageTokens": 30.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/lifecycle_correlation.py": {
            "lines": 127,
            "tokens": 1667,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/env_config.py": {
            "lines": 123,
            "tokens": 645,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/env.py": {
            "lines": 128,
            "tokens": 1264,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/converters.py": {
            "lines": 120,
            "tokens": 1381,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 14,
            "duplicatedTokens": 238,
            "percentage": 11.67,
            "percentageTokens": 17.23,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/config_loader.py": {
            "lines": 100,
            "tokens": 1452,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/aurora_event_logger.py": {
            "lines": 204,
            "tokens": 1719,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "core/ack_tracker.py": {
            "lines": 73,
            "tokens": 749,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "common/xai_logger.py": {
            "lines": 42,
            "tokens": 371,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "common/events.py": {
            "lines": 43,
            "tokens": 313,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "common/config.py": {
            "lines": 305,
            "tokens": 2298,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "certification/__init__.py": {
            "lines": 11,
            "tokens": 56,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "certification/uncertainty.py": {
            "lines": 47,
            "tokens": 629,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "certification/icp.py": {
            "lines": 91,
            "tokens": 564,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "aurora/health.py": {
            "lines": 125,
            "tokens": 1344,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "aurora/governance.py": {
            "lines": 81,
            "tokens": 1270,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "api/models.py": {
            "lines": 77,
            "tokens": 783,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "api/middleware.py": {
            "lines": 100,
            "tokens": 1181,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "tmp_pretrade.py": {
            "lines": 5,
            "tokens": 96,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "gen_attest_a4.py": {
            "lines": 51,
            "tokens": 465,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "gen_attest.py": {
            "lines": 15,
            "tokens": 298,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "aurora_api_lite.py": {
            "lines": 143,
            "tokens": 1016,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 71478,
          "tokens": 623126,
          "sources": 381,
          "clones": 172,
          "duplicatedLines": 2638,
          "duplicatedTokens": 23433,
          "percentage": 3.69,
          "percentageTokens": 3.76,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      }
    },
    "total": {
      "lines": 71478,
      "tokens": 623126,
      "sources": 381,
      "clones": 172,
      "duplicatedLines": 2638,
      "duplicatedTokens": 23433,
      "percentage": 3.69,
      "percentageTokens": 3.76,
      "newDuplicatedLines": 0,
      "newClones": 0
    }
  },
  "duplicates": [
    {
      "format": "python",
      "lines": 33,
      "fragment": ":\n    \"\"\"Targeted tests for dictionary access pattern mutants\"\"\"\n\n    def test_get_or_default_patterns_mutant(self):\n        \"\"\"Kill mutant: 'or' -> 'and' in dict.get() or default patterns\"\"\"\n\n        test_dicts = [\n            {},  # Empty dict\n            {\"key\": \"value\"},  # Has key\n            {\"other_key\": \"value\"},  # Missing key\n        ]\n\n        for d in test_dicts:\n            # Test pattern: d.get('key') or default\n            result = d.get('key') or \"default\"\n            assert result is not None\n\n            # Test pattern: d.get('key') or {}\n            result_dict = d.get('key') or {}\n            assert isinstance(result_dict, (str, dict))\n\n    def test_compound_get_or_patterns_mutant(self):\n        \"\"\"Kill mutant: boolean logic in compound get() or patterns\"\"\"\n\n        test_dicts = [\n            {},  # Missing both\n            {\"guards\": {}},  # Has guards\n            {\"gates\": {}},   # Has gates\n            {\"guards\": {}, \"gates\": {}},  # Has both\n        ]\n\n        for d in test_dicts:\n            # Test pattern: ((d.get('guards') or d.get('gates') or {}))",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\api\\test_api_survived_mutants.py",
        "start": 240,
        "end": 272,
        "startLoc": {
          "line": 240,
          "column": 32,
          "position": 1649
        },
        "endLoc": {
          "line": 272,
          "column": 60,
          "position": 1871
        }
      },
      "secondFile": {
        "name": "tests\\unit\\core_aurora\\test_core_aurora_survived_mutants.py",
        "start": 297,
        "end": 329,
        "startLoc": {
          "line": 297,
          "column": 30,
          "position": 2088
        },
        "endLoc": {
          "line": 329,
          "column": 58,
          "position": 2310
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n\n        # Submit order\n        xai.emit(\"ORDER.SUBMIT\", {\"order\": order.__dict__, \"action\": \"submit\"}, {}, \"Order submission\", 0.9)\n        result = await om.submit_order(order)\n        assert result[\"status\"] == \"accepted\"\n\n        # Configure status for cancelled order\n        om.get_order_status.return_value = {\n            \"status\": \"cancelled\",\n            \"order_id\": result[\"order_id\"]\n        }\n\n        # Wait for FOK evaluation",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\integration\\oms\\test_order_lifecycle.py",
        "start": 306,
        "end": 319,
        "startLoc": {
          "line": 306,
          "column": 9,
          "position": 2266
        },
        "endLoc": {
          "line": 319,
          "column": 26,
          "position": 2368
        }
      },
      "secondFile": {
        "name": "tests\\integration\\oms\\test_order_lifecycle.py",
        "start": 252,
        "end": 265,
        "startLoc": {
          "line": 252,
          "column": 9,
          "position": 1868
        },
        "endLoc": {
          "line": 265,
          "column": 36,
          "position": 1970
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")),\n                fee=float(Decimal(\"0.001\")),\n                fee_asset=\"USDT\",\n                ts_ns=int(time.time() * 1_000_000_000)\n            )\n        ]\n        om.get_order_fills.return_value = mock_fills\n        xai.emit(\"ORDER.SUBMIT\", {\"order\": order.__dict__, \"action\": \"submit\"}, {}, \"Order submission\", 0.9)\n        result = await om.submit_order(order)\n        assert result[\"status\"] == \"accepted\"\n\n        # Wait for fills",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\integration\\oms\\test_order_lifecycle.py",
        "start": 508,
        "end": 519,
        "startLoc": {
          "line": 508,
          "column": 6,
          "position": 3787
        },
        "endLoc": {
          "line": 519,
          "column": 17,
          "position": 3904
        }
      },
      "secondFile": {
        "name": "tests\\integration\\oms\\test_order_lifecycle.py",
        "start": 182,
        "end": 193,
        "startLoc": {
          "line": 182,
          "column": 6,
          "position": 1292
        },
        "endLoc": {
          "line": 193,
          "column": 21,
          "position": 1409
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "def request(self, method: str, url: str, *, params: Optional[Mapping[str, object]] = None,\r\n                headers: Optional[Mapping[str, str]] = None, json: Optional[object] = None) -> Mapping[str, object]:\r\n        ...\r\n\r\n\r\n# --------------------------- Abstract Exchange ---------------------------",
      "tokens": 0,
      "firstFile": {
        "name": "core\\execution\\exchange\\common.py",
        "start": 234,
        "end": 239,
        "startLoc": {
          "line": 234,
          "column": 5,
          "position": 1729
        },
        "endLoc": {
          "line": 239,
          "column": 76,
          "position": 1827
        }
      },
      "secondFile": {
        "name": "core\\execution\\exchange\\unified.py",
        "start": 128,
        "end": 133,
        "startLoc": {
          "line": 128,
          "column": 5,
          "position": 975
        },
        "endLoc": {
          "line": 133,
          "column": 6,
          "position": 1073
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "make_idempotency_key(\"oid\", {\r\n                    \"s\": clean.symbol,\r\n                    \"sd\": clean.side.value,\r\n                    \"t\": clean.type.value,\r\n                    \"q\": clean.quantity,\r\n                    \"p\": clean.price if clean.price is not None else \"\",\r\n                })\r\n            )",
      "tokens": 0,
      "firstFile": {
        "name": "core\\execution\\exchange\\common.py",
        "start": 283,
        "end": 290,
        "startLoc": {
          "line": 283,
          "column": 2,
          "position": 2339
        },
        "endLoc": {
          "line": 290,
          "column": 2,
          "position": 2423
        }
      },
      "secondFile": {
        "name": "core\\execution\\exchange\\gate.py",
        "start": 106,
        "end": 113,
        "startLoc": {
          "line": 106,
          "column": 2,
          "position": 1090
        },
        "endLoc": {
          "line": 113,
          "column": 52,
          "position": 1174
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "coid = clean.client_order_id or make_idempotency_key(\"oid\", {\r\n            \"s\": clean.symbol,\r\n            \"sd\": clean.side.value,\r\n            \"t\": clean.type.value,\r\n            \"q\": clean.quantity,\r\n            \"p\": clean.price if clean.price is not None else \"\",\r\n        })\r\n        ts",
      "tokens": 0,
      "firstFile": {
        "name": "core\\execution\\exchange\\binance.py",
        "start": 134,
        "end": 141,
        "startLoc": {
          "line": 134,
          "column": 9,
          "position": 1486
        },
        "endLoc": {
          "line": 141,
          "column": 3,
          "position": 1580
        }
      },
      "secondFile": {
        "name": "core\\execution\\exchange\\gate.py",
        "start": 106,
        "end": 113,
        "startLoc": {
          "line": 106,
          "column": 9,
          "position": 1080
        },
        "endLoc": {
          "line": 113,
          "column": 52,
          "position": 1174
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ",\r\n            cumm_quote_cost=cumm_quote_cost,\r\n            fills=fills,\r\n            ts_ns=int(self.server_time_ns_hint()),\r\n            raw=res,\r\n        )\r\n\r\n    def cancel_order(self, symbol: str, order_id: str | None = None, client_order_id: str | None = None) -> Mapping[str, object]:\r\n        ts",
      "tokens": 0,
      "firstFile": {
        "name": "core\\execution\\exchange\\binance.py",
        "start": 181,
        "end": 189,
        "startLoc": {
          "line": 181,
          "column": 13,
          "position": 2120
        },
        "endLoc": {
          "line": 189,
          "column": 3,
          "position": 2220
        }
      },
      "secondFile": {
        "name": "core\\execution\\exchange\\gate.py",
        "start": 145,
        "end": 153,
        "startLoc": {
          "line": 145,
          "column": 13,
          "position": 1573
        },
        "endLoc": {
          "line": 153,
          "column": 5,
          "position": 1673
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "(self, symbol: str, order_id: str | None = None, client_order_id: str | None = None) -> Mapping[str, object]:\r\n        ts = self.get_server_time_ms()\r\n        params = {\r\n            \"symbol\": self.normalize_symbol(symbol),\r\n            \"timestamp\": ts,\r\n            \"recvWindow\": 5000,\r\n        }\r\n        if order_id:\r\n            params[\"orderId\"] = order_id\r\n        if client_order_id:\r\n            params[\"origClientOrderId\"] = client_order_id\r\n        return cast(Dict[str, Any], self._signed_request(\"GET\"",
      "tokens": 0,
      "firstFile": {
        "name": "core\\execution\\exchange\\binance.py",
        "start": 201,
        "end": 212,
        "startLoc": {
          "line": 201,
          "column": 10,
          "position": 2347
        },
        "endLoc": {
          "line": 212,
          "column": 6,
          "position": 2505
        }
      },
      "secondFile": {
        "name": "core\\execution\\exchange\\binance.py",
        "start": 188,
        "end": 199,
        "startLoc": {
          "line": 188,
          "column": 13,
          "position": 2168
        },
        "endLoc": {
          "line": 199,
          "column": 9,
          "position": 2326
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": ",\r\n        target_qty=1.0,\r\n        fills=fills,\r\n        arrival_ts_ns=1000000000,\r\n        decision_ts_ns=1000000000,\r\n        arrival_price=100.0,\r\n        arrival_spread_bps=2.0,\r\n        latency_ms=10.0\r\n    )\r\n    \r\n    market_data = {\r\n        'mid_price': 100.0,\r\n        'micro_price': 100.0,\r\n        'slip_bps': 5.0\r\n    }\r\n    \r\n    metrics = analyzer.analyze_order(execution, market_data)\r\n    \r\n    # Check identity using legacy-positive decomposition",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_tca_identity.py",
        "start": 68,
        "end": 86,
        "startLoc": {
          "line": 68,
          "column": 7,
          "position": 524
        },
        "endLoc": {
          "line": 86,
          "column": 53,
          "position": 637
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_tca_identity.py",
        "start": 16,
        "end": 34,
        "startLoc": {
          "line": 16,
          "column": 6,
          "position": 127
        },
        "endLoc": {
          "line": 34,
          "column": 151,
          "position": 240
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": "components_sum = (\r\n        metrics.raw_edge_bps +\r\n        metrics.fees_bps +\r\n        metrics.spread_cost_bps +\r\n        metrics.latency_slippage_bps +\r\n        metrics.adverse_selection_bps +\r\n        metrics.temporary_impact_bps +\r\n        metrics.rebate_bps\r\n    )\r\n\r\n    assert abs(metrics.implementation_shortfall_bps - components_sum) <= 1e-6\r\n    \r\n    # Check sign conventions\r\n    assert metrics.fees_bps <= 0\r\n    assert metrics.slippage_in_bps <= 0  # Maker profile -> 0\r\n    assert metrics.slippage_out_bps <= 0\r\n    assert metrics.adverse_bps <= 0\r\n    assert metrics.latency_bps <= 0\r\n    assert metrics.impact_bps <= 0\r\n    assert metrics.rebate_bps >= 0\r\n\r\n\r\ndef test_maker_profile_with_rebate",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_tca_identity.py",
        "start": 87,
        "end": 109,
        "startLoc": {
          "line": 87,
          "column": 5,
          "position": 641
        },
        "endLoc": {
          "line": 109,
          "column": 31,
          "position": 827
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_tca_identity.py",
        "start": 35,
        "end": 57,
        "startLoc": {
          "line": 35,
          "column": 5,
          "position": 244
        },
        "endLoc": {
          "line": 57,
          "column": 20,
          "position": 430
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ",\r\n        symbol=\"BTCUSDT\",\r\n        side=\"BUY\",\r\n        target_qty=1.0,\r\n        fills=fills,\r\n        arrival_ts_ns=1000000000,\r\n        decision_ts_ns=1000000000,\r\n        arrival_price=100.0,\r\n        arrival_spread_bps=2.0,\r\n        latency_ms=10.0\r\n    )\r\n    \r\n    market_data = {\r\n        'mid_price': 100.0,\r\n        'micro_price': 100.0,\r\n        'slip_bps': 2.0",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_tca_identity.py",
        "start": 119,
        "end": 134,
        "startLoc": {
          "line": 119,
          "column": 13,
          "position": 942
        },
        "endLoc": {
          "line": 134,
          "column": 4,
          "position": 1041
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_tca_identity.py",
        "start": 14,
        "end": 29,
        "startLoc": {
          "line": 14,
          "column": 12,
          "position": 113
        },
        "endLoc": {
          "line": 29,
          "column": 4,
          "position": 212
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": ",\r\n        symbol=\"BTCUSDT\",\r\n        side=\"BUY\",\r\n        target_qty=1.0,\r\n        fills=fills,\r\n        arrival_ts_ns=1000000000,\r\n        decision_ts_ns=1000000000,\r\n        arrival_price=100.0,\r\n        arrival_spread_bps=2.0,\r\n        latency_ms=10.0\r\n    )\r\n    \r\n    market_data = {\r\n        'mid_price': 100.0,\r\n        'micro_price': 100.0,\r\n        'slip_bps': 5.0\r\n    }\r\n    \r\n    metrics = analyzer.analyze_order(execution, market_data)\r\n    \r\n    # Taker profile",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_tca_identity.py",
        "start": 172,
        "end": 192,
        "startLoc": {
          "line": 172,
          "column": 13,
          "position": 1311
        },
        "endLoc": {
          "line": 192,
          "column": 16,
          "position": 1438
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_tca_identity.py",
        "start": 14,
        "end": 34,
        "startLoc": {
          "line": 14,
          "column": 12,
          "position": 113
        },
        "endLoc": {
          "line": 34,
          "column": 151,
          "position": 240
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": ",\r\n        symbol=\"BTCUSDT\",\r\n        side=\"BUY\",\r\n        target_qty=1.0,\r\n        fills=fills,\r\n        arrival_ts_ns=1000000000,\r\n        decision_ts_ns=1000000000,\r\n        arrival_price=100.0,\r\n        arrival_spread_bps=2.0,\r\n        latency_ms=10.0\r\n    )\r\n    \r\n    market_data = {\r\n        'mid_price': 100.0,\r\n        'micro_price': 100.0,\r\n        'slip_bps': 5.0\r\n    }\r\n    \r\n    # This should raise ValueError due to sign gate violation",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_tca_identity.py",
        "start": 224,
        "end": 242,
        "startLoc": {
          "line": 224,
          "column": 22,
          "position": 1678
        },
        "endLoc": {
          "line": 242,
          "column": 58,
          "position": 1787
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_tca_identity.py",
        "start": 14,
        "end": 32,
        "startLoc": {
          "line": 14,
          "column": 12,
          "position": 113
        },
        "endLoc": {
          "line": 32,
          "column": 8,
          "position": 222
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ",\n            symbol='BTCUSDT',\n            side='BUY',\n            target_qty=100.0,\n            fills=fills,\n            arrival_ts_ns=int(time.time_ns()),\n            decision_ts_ns=int(time.time_ns()) - 1000000,\n            arrival_price=100.0,\n            arrival_spread_bps=10.0,\n            latency_ms=1.0\n        )\n\n        metrics = analyzer.analyze_order(execution, sample_market_data)\n\n        # Total fees should be sum of all fill fees",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_tca_analyzer.py",
        "start": 375,
        "end": 389,
        "startLoc": {
          "line": 375,
          "column": 12,
          "position": 3095
        },
        "endLoc": {
          "line": 389,
          "column": 44,
          "position": 3189
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_tca_analyzer.py",
        "start": 173,
        "end": 187,
        "startLoc": {
          "line": 173,
          "column": 15,
          "position": 1489
        },
        "endLoc": {
          "line": 187,
          "column": 25,
          "position": 1583
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ",\n            symbol='BTCUSDT',\n            side='BUY',\n            target_qty=100.0,\n            fills=fills,\n            arrival_ts_ns=int(time.time_ns()),\n            decision_ts_ns=int(time.time_ns()) - 1000000,\n            arrival_price=100.0,\n            arrival_spread_bps=10.0,\n            latency_ms=1.0\n        )\n\n        # Mock market data with different mid vs micro",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_tca_analyzer.py",
        "start": 507,
        "end": 519,
        "startLoc": {
          "line": 507,
          "column": 17,
          "position": 4132
        },
        "endLoc": {
          "line": 519,
          "column": 47,
          "position": 4210
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_tca_analyzer.py",
        "start": 173,
        "end": 185,
        "startLoc": {
          "line": 173,
          "column": 15,
          "position": 1489
        },
        "endLoc": {
          "line": 185,
          "column": 8,
          "position": 1567
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ",\n            symbol='BTCUSDT',\n            side='BUY',\n            target_qty=100.0,\n            fills=fills,\n            arrival_ts_ns=int(time.time_ns()),\n            decision_ts_ns=int(time.time_ns()) - 1000000,\n            arrival_price=100.0,\n            arrival_spread_bps=10.0,\n            latency_ms=1.0\n        )\n\n        metrics = analyzer.analyze_order(execution, sample_market_data)\n\n        # Should calculate average queue position",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_tca_analyzer.py",
        "start": 601,
        "end": 615,
        "startLoc": {
          "line": 601,
          "column": 13,
          "position": 4910
        },
        "endLoc": {
          "line": 615,
          "column": 42,
          "position": 5004
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_tca_analyzer.py",
        "start": 173,
        "end": 187,
        "startLoc": {
          "line": 173,
          "column": 15,
          "position": 1489
        },
        "endLoc": {
          "line": 187,
          "column": 25,
          "position": 1583
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "from core.execution.sim_local_sink import SimLocalSink\n\n\ndef make_market(bid=99.0, ask=101.0, bid_qty=10.0, ask_qty=10.0):\n    return {\n        'best_bid': bid,\n        'best_ask': ask,\n        'liquidity': {'bid': bid_qty, 'ask': ask_qty},\n        'depth'",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_sim_local_sink_coverage.py",
        "start": 10,
        "end": 18,
        "startLoc": {
          "line": 10,
          "column": 1,
          "position": 33
        },
        "endLoc": {
          "line": 18,
          "column": 8,
          "position": 110
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_sim_local_tca_and_determinism.py",
        "start": 3,
        "end": 11,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 10
        },
        "endLoc": {
          "line": 11,
          "column": 2,
          "position": 95
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "from core.execution.sim_local_sink import SimLocalSink\r\n\r\n\r\ndef make_market(bid=99.0, ask=101.0, bid_qty=10.0, ask_qty=10.0):\r\n    return {\r\n        'best_bid': bid,\r\n        'best_ask': ask,\r\n        'liquidity': {'bid': bid_qty, 'ask': ask_qty},\r\n        'depth': {'at_price': {}, 'levels_sum': {}},\r\n        'traded_since_last': {},\r\n    }\r\n\r\n\r\ndef",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_sim_local_basic.py",
        "start": 5,
        "end": 18,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 18
        },
        "endLoc": {
          "line": 18,
          "column": 4,
          "position": 140
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_sim_local_tca_and_determinism.py",
        "start": 3,
        "end": 23,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 10
        },
        "endLoc": {
          "line": 23,
          "column": 6,
          "position": 142
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "@patch('core.env_config.load_binance_cfg')\n        def test_inner(mock_load_cfg):\n            mock_cfg = Mock()\n            mock_cfg.base_url = \"https://api.binance.com\"\n            mock_load_cfg.return_value = mock_cfg\n\n            broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n\n            # Mock filters\n            broker.filters = {\n                \"BTCUSDT\": BinanceFilters(\n                    lot_size_min_qty=Decimal(\"0.001\"),\n                    lot_size_max_qty=Decimal(\"1000\"),\n                    lot_size_step_size=Decimal(\"0.001\"),\n                    price_filter_min_price=Decimal(\"0.01\"),\n                    price_filter_max_price=Decimal(\"100000\"),\n                    price_filter_tick_size=Decimal(\"0.01\"),\n                    min_notional=Decimal(\"10.0\")\n                )\n            }\n\n            # Quantity below minimum",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 83,
        "end": 104,
        "startLoc": {
          "line": 83,
          "column": 9,
          "position": 579
        },
        "endLoc": {
          "line": 104,
          "column": 25,
          "position": 725
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 39,
        "end": 60,
        "startLoc": {
          "line": 39,
          "column": 9,
          "position": 255
        },
        "endLoc": {
          "line": 60,
          "column": 17,
          "position": 401
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "@patch('core.env_config.load_binance_cfg')\n        def test_inner(mock_load_cfg):\n            mock_cfg = Mock()\n            mock_cfg.base_url = \"https://api.binance.com\"\n            mock_load_cfg.return_value = mock_cfg\n\n            broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n\n            # Mock filters\n            broker.filters = {\n                \"BTCUSDT\": BinanceFilters(\n                    lot_size_min_qty=Decimal(\"0.001\"),\n                    lot_size_max_qty=Decimal(\"1000\"),\n                    lot_size_step_size=Decimal(\"0.001\"),\n                    price_filter_min_price=Decimal(\"0.01\"),\n                    price_filter_max_price=Decimal(\"100000\"),\n                    price_filter_tick_size=Decimal(\"0.01\"),\n                    min_notional=Decimal(\"10.0\")\n                )\n            }\n\n            # Quantity above maximum",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 115,
        "end": 136,
        "startLoc": {
          "line": 115,
          "column": 9,
          "position": 803
        },
        "endLoc": {
          "line": 136,
          "column": 25,
          "position": 949
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 39,
        "end": 60,
        "startLoc": {
          "line": 39,
          "column": 9,
          "position": 255
        },
        "endLoc": {
          "line": 60,
          "column": 17,
          "position": 401
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "@patch('core.env_config.load_binance_cfg')\n        @patch.object(ShadowBroker, '_fetch_exchange_info')\n        def test_inner(mock_fetch, mock_load_cfg):\n            mock_cfg = Mock()\n            mock_cfg.base_url = \"https://api.binance.com\"\n            mock_load_cfg.return_value = mock_cfg\n            \n            broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n            \n            # Mock filters\n            broker.filters = {\n                \"BTCUSDT\": BinanceFilters(\n                    lot_size_min_qty=Decimal(\"0.001\"),\n                    lot_size_max_qty=Decimal(\"1000\"),\n                    lot_size_step_size=Decimal(\"0.001\"),\n                    price_filter_min_price=Decimal(\"0.01\"),\n                    price_filter_max_price=Decimal(\"100000\"),\n                    price_filter_tick_size=Decimal(\"0.01\"),\n                    min_notional=Decimal(\"10.0\")\n                )\n            }            # Valid price",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 178,
        "end": 198,
        "startLoc": {
          "line": 178,
          "column": 9,
          "position": 1267
        },
        "endLoc": {
          "line": 198,
          "column": 14,
          "position": 1427
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 147,
        "end": 60,
        "startLoc": {
          "line": 147,
          "column": 9,
          "position": 1027
        },
        "endLoc": {
          "line": 60,
          "column": 17,
          "position": 401
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "@patch('core.env_config.load_binance_cfg')\n        def test_inner(mock_load_cfg):\n            mock_cfg = Mock()\n            mock_cfg.base_url = \"https://api.binance.com\"\n            mock_load_cfg.return_value = mock_cfg\n\n            broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n\n            # Mock filters\n            broker.filters = {\n                \"BTCUSDT\": BinanceFilters(\n                    lot_size_min_qty=Decimal(\"0.001\"),\n                    lot_size_max_qty=Decimal(\"1000\"),\n                    lot_size_step_size=Decimal(\"0.001\"),\n                    price_filter_min_price=Decimal(\"0.01\"),\n                    price_filter_max_price=Decimal(\"100000\"),\n                    price_filter_tick_size=Decimal(\"0.01\"),\n                    min_notional=Decimal(\"10.0\")\n                )\n            }\n\n            # Price below minimum",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 221,
        "end": 242,
        "startLoc": {
          "line": 221,
          "column": 9,
          "position": 1607
        },
        "endLoc": {
          "line": 242,
          "column": 22,
          "position": 1753
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 39,
        "end": 60,
        "startLoc": {
          "line": 39,
          "column": 9,
          "position": 255
        },
        "endLoc": {
          "line": 60,
          "column": 17,
          "position": 401
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "@patch('core.env_config.load_binance_cfg')\n        def test_inner(mock_load_cfg):\n            mock_cfg = Mock()\n            mock_cfg.base_url = \"https://api.binance.com\"\n            mock_load_cfg.return_value = mock_cfg\n\n            broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n\n            # Mock filters\n            broker.filters = {\n                \"BTCUSDT\": BinanceFilters(\n                    lot_size_min_qty=Decimal(\"0.001\"),\n                    lot_size_max_qty=Decimal(\"1000\"),\n                    lot_size_step_size=Decimal(\"0.001\"),\n                    price_filter_min_price=Decimal(\"0.01\"),\n                    price_filter_max_price=Decimal(\"100000\"),\n                    price_filter_tick_size=Decimal(\"0.01\"),\n                    min_notional=Decimal(\"10.0\")\n                )\n            }\n\n            # Price above maximum",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 253,
        "end": 274,
        "startLoc": {
          "line": 253,
          "column": 9,
          "position": 1831
        },
        "endLoc": {
          "line": 274,
          "column": 22,
          "position": 1977
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 39,
        "end": 60,
        "startLoc": {
          "line": 39,
          "column": 9,
          "position": 255
        },
        "endLoc": {
          "line": 60,
          "column": 17,
          "position": 401
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "@patch('core.env_config.load_binance_cfg')\n        @patch.object(ShadowBroker, '_fetch_exchange_info')\n        def test_inner(mock_fetch, mock_load_cfg):\n            mock_cfg = Mock()\n            mock_cfg.base_url = \"https://api.binance.com\"\n            mock_load_cfg.return_value = mock_cfg\n            \n            broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n            \n            # Mock filters\n            broker.filters = {\n                \"BTCUSDT\": BinanceFilters(\n                    lot_size_min_qty=Decimal(\"0.001\"),\n                    lot_size_max_qty=Decimal(\"1000\"),\n                    lot_size_step_size=Decimal(\"0.001\"),\n                    price_filter_min_price=Decimal(\"0.01\"),\n                    price_filter_max_price=Decimal(\"49.99\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 285,
        "end": 301,
        "startLoc": {
          "line": 285,
          "column": 9,
          "position": 2055
        },
        "endLoc": {
          "line": 301,
          "column": 8,
          "position": 2188
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 147,
        "end": 54,
        "startLoc": {
          "line": 147,
          "column": 9,
          "position": 1027
        },
        "endLoc": {
          "line": 54,
          "column": 9,
          "position": 372
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "@patch('core.env_config.load_binance_cfg')\n        def test_inner(mock_load_cfg):\n            mock_cfg = Mock()\n            mock_cfg.base_url = \"https://api.binance.com\"\n            mock_load_cfg.return_value = mock_cfg\n\n            broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n\n            # Mock filters\n            broker.filters = {\n                \"BTCUSDT\": BinanceFilters(\n                    lot_size_min_qty=Decimal(\"0.001\"),\n                    lot_size_max_qty=Decimal(\"1000\"),\n                    lot_size_step_size=Decimal(\"0.001\"),\n                    price_filter_min_price=Decimal(\"0.01\"),\n                    price_filter_max_price=Decimal(\"100000\"),\n                    price_filter_tick_size=Decimal(\"0.01\"),\n                    min_notional=Decimal(\"10.0\")\n                )\n            }\n\n            # Valid notional (1.0 * 15.0 = 15.0 > 10.0)",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 316,
        "end": 337,
        "startLoc": {
          "line": 316,
          "column": 9,
          "position": 2295
        },
        "endLoc": {
          "line": 337,
          "column": 44,
          "position": 2441
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 39,
        "end": 60,
        "startLoc": {
          "line": 39,
          "column": 9,
          "position": 255
        },
        "endLoc": {
          "line": 60,
          "column": 17,
          "position": 401
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "@patch('core.env_config.load_binance_cfg')\n        def test_inner(mock_load_cfg):\n            mock_cfg = Mock()\n            mock_cfg.base_url = \"https://api.binance.com\"\n            mock_load_cfg.return_value = mock_cfg\n\n            broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n\n            # Mock filters\n            broker.filters = {\n                \"BTCUSDT\": BinanceFilters(\n                    lot_size_min_qty=Decimal(\"0.001\"),\n                    lot_size_max_qty=Decimal(\"1000\"),\n                    lot_size_step_size=Decimal(\"0.001\"),\n                    price_filter_min_price=Decimal(\"0.01\"),\n                    price_filter_max_price=Decimal(\"100000\"),\n                    price_filter_tick_size=Decimal(\"0.01\"),\n                    min_notional=Decimal(\"10.0\")\n                )\n            }\n\n            # Notional too small (0.5 * 15.0 = 7.5 < 10.0)",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 348,
        "end": 369,
        "startLoc": {
          "line": 348,
          "column": 9,
          "position": 2519
        },
        "endLoc": {
          "line": 369,
          "column": 47,
          "position": 2665
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 39,
        "end": 60,
        "startLoc": {
          "line": 39,
          "column": 9,
          "position": 255
        },
        "endLoc": {
          "line": 60,
          "column": 17,
          "position": 401
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "mock_load_cfg.return_value = mock_cfg\n\n        broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n\n        # Mock filters\n        broker.filters = {\n            \"BTCUSDT\": BinanceFilters(\n                lot_size_min_qty=Decimal(\"0.001\"),\n                lot_size_max_qty=Decimal(\"1000\"),\n                lot_size_step_size=Decimal(\"0.001\"),\n                price_filter_min_price=Decimal(\"0.01\"),\n                price_filter_max_price=Decimal(\"100000\"),\n                price_filter_tick_size=Decimal(\"0.01\"),\n                min_notional=Decimal(\"10.0\")\n            )\n        }\n\n        # Use validate_and_round_order instead of non-existent validate_order",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 517,
        "end": 534,
        "startLoc": {
          "line": 517,
          "column": 9,
          "position": 3740
        },
        "endLoc": {
          "line": 534,
          "column": 70,
          "position": 3853
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 43,
        "end": 60,
        "startLoc": {
          "line": 43,
          "column": 13,
          "position": 288
        },
        "endLoc": {
          "line": 60,
          "column": 17,
          "position": 401
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "),\n                price_filter_min_price=Decimal(\"0.01\"),\n                price_filter_max_price=Decimal(\"100000\"),\n                price_filter_tick_size=Decimal(\"0.01\"),\n                min_notional=Decimal(\"10.0\")\n            )\n        }\n\n        # Use validate_and_round_order instead of non-existent validate_order\n        is_valid, message, rounded_qty, rounded_price = broker.validate_and_round_order(\n            \"BTCUSDT\", \"BUY\", \"LIMIT\", 0.0005",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 526,
        "end": 536,
        "startLoc": {
          "line": 526,
          "column": 8,
          "position": 3807
        },
        "endLoc": {
          "line": 536,
          "column": 7,
          "position": 3884
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 494,
        "end": 504,
        "startLoc": {
          "line": 494,
          "column": 10,
          "position": 3576
        },
        "endLoc": {
          "line": 504,
          "column": 6,
          "position": 3653
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "= \"https://api.binance.com\"\n        mock_cfg.api_key = \"test_key\"\n        mock_cfg.api_secret = \"test_secret\"\n        mock_load_cfg.return_value = mock_cfg\n        \n        broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n        \n        # Mock filters\n        broker.filters = {\n            \"BTCUSDT\": BinanceFilters(\n                lot_size_min_qty=Decimal(\"0.001\"),\n                lot_size_max_qty=Decimal(\"1000\"),\n                lot_size_step_size=Decimal(\"0.001\"),\n                price_filter_min_price=Decimal(\"0.01\"),\n                price_filter_max_price=Decimal(\"100000\"),\n                price_filter_tick_size=Decimal(\"0.01\"),\n                min_notional=Decimal(\"10.0\")\n            )\n        }\n        \n        order",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 547,
        "end": 567,
        "startLoc": {
          "line": 547,
          "column": 2,
          "position": 3964
        },
        "endLoc": {
          "line": 567,
          "column": 6,
          "position": 4103
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 514,
        "end": 60,
        "startLoc": {
          "line": 514,
          "column": 2,
          "position": 3717
        },
        "endLoc": {
          "line": 60,
          "column": 17,
          "position": 401
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ",\n            \"type\": \"MARKET\",\n            \"quantity\": \"0.001\"\n        }\n        \n        # Use submit_order instead of non-existent simulate_fill\n        result = broker.submit_order(\n            order[\"symbol\"], order[\"side\"], order[\"type\"], \n            float(order[\"quantity\"])\n        )\n        \n        assert result[\"symbol\"] == \"BTCUSDT\"\n        assert result[\"side\"] == \"SELL\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 627,
        "end": 639,
        "startLoc": {
          "line": 627,
          "column": 7,
          "position": 4584
        },
        "endLoc": {
          "line": 639,
          "column": 7,
          "position": 4673
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 597,
        "end": 609,
        "startLoc": {
          "line": 597,
          "column": 6,
          "position": 4347
        },
        "endLoc": {
          "line": 609,
          "column": 6,
          "position": 4436
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "mock_cfg = Mock()\n        mock_cfg.spot_url = \"https://api.binance.com\"\n        mock_cfg.api_key = \"test_key\"\n        mock_cfg.api_secret = \"test_secret\"\n        mock_load_cfg.return_value = mock_cfg\n        \n        broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n        \n        order = {\n            \"symbol\": \"BTCUSDT\",\n            \"side\": \"BUY\",\n            \"type\": \"LIMIT\",\n            \"quantity\": \"0.001\",\n            \"price\": \"50000.00\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 679,
        "end": 692,
        "startLoc": {
          "line": 679,
          "column": 9,
          "position": 4997
        },
        "endLoc": {
          "line": 692,
          "column": 11,
          "position": 5098
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 647,
        "end": 660,
        "startLoc": {
          "line": 647,
          "column": 9,
          "position": 4735
        },
        "endLoc": {
          "line": 660,
          "column": 11,
          "position": 4836
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "def test_binance_filters_creation(self):\n        \"\"\"Test valid BinanceFilters creation.\"\"\"\n        filters = BinanceFilters(\n            lot_size_min_qty=Decimal(\"0.00001\"),\n            lot_size_max_qty=Decimal(\"100000\"),\n            lot_size_step_size=Decimal(\"0.00001\"),\n            price_filter_min_price=Decimal(\"0.01\"),\n            price_filter_max_price=Decimal(\"1000000\"),\n            price_filter_tick_size=Decimal(\"0.01\"),\n            min_notional=Decimal(\"10.0\")\n        )\n        \n        assert filters.lot_size_min_qty == Decimal(\"0.00001\")\n        assert filters.lot_size_max_qty == Decimal(\"100000\")\n        assert filters.lot_size_step_size == Decimal(\"0.00001\")\n        assert filters.price_filter_min_price == Decimal(\"0.01\")\n        assert filters.price_filter_max_price == Decimal(\"1000000\")\n        assert filters.price_filter_tick_size == Decimal(\"0.01\")\n        assert filters.min_notional == Decimal(\"10.0\")\n\n\nclass",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 15,
        "end": 36,
        "startLoc": {
          "line": 15,
          "column": 5,
          "position": 65
        },
        "endLoc": {
          "line": 36,
          "column": 6,
          "position": 251
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 17,
        "end": 37,
        "startLoc": {
          "line": 17,
          "column": 5,
          "position": 56
        },
        "endLoc": {
          "line": 37,
          "column": 4,
          "position": 243
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "mock_cfg = Mock()\n        mock_cfg.base_url = \"https://api.binance.com\"\n        mock_cfg.api_key = \"test_key\"\n        mock_cfg.api_secret = \"test_secret\"\n        mock_load_cfg.return_value = mock_cfg\n        \n        # Mock exchange info response\n        mock_response = Mock()\n        mock_response.ok = True\n        mock_response.json.return_value = {\"symbols\": []}\n        mock_get.return_value = mock_response\n        \n        broker = ShadowBroker(symbols=[\"ETHUSDT\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 65,
        "end": 77,
        "startLoc": {
          "line": 65,
          "column": 9,
          "position": 470
        },
        "endLoc": {
          "line": 77,
          "column": 10,
          "position": 575
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 43,
        "end": 55,
        "startLoc": {
          "line": 43,
          "column": 9,
          "position": 297
        },
        "endLoc": {
          "line": 55,
          "column": 10,
          "position": 402
        }
      }
    },
    {
      "format": "python",
      "lines": 28,
      "fragment": "mock_response.json.return_value = {\n            \"symbols\": [{\n                \"symbol\": \"BTCUSDT\",\n                \"status\": \"TRADING\",\n                \"filters\": [\n                    {\n                        \"filterType\": \"LOT_SIZE\",\n                        \"minQty\": \"0.00001000\",\n                        \"maxQty\": \"9000.00000000\",\n                        \"stepSize\": \"0.00001000\"\n                    },\n                    {\n                        \"filterType\": \"PRICE_FILTER\",\n                        \"minPrice\": \"0.01000000\",\n                        \"maxPrice\": \"1000000.00000000\",\n                        \"tickSize\": \"0.01000000\"\n                    },\n                    {\n                        \"filterType\": \"MIN_NOTIONAL\",\n                        \"minNotional\": \"10.00000000\"\n                    }\n                ]\n            }]\n        }\n        mock_get.return_value = mock_response\n        \n        broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n        filters",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 94,
        "end": 121,
        "startLoc": {
          "line": 94,
          "column": 9,
          "position": 698
        },
        "endLoc": {
          "line": 121,
          "column": 8,
          "position": 858
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 412,
        "end": 440,
        "startLoc": {
          "line": 412,
          "column": 9,
          "position": 2978
        },
        "endLoc": {
          "line": 440,
          "column": 33,
          "position": 3138
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "mock_cfg = Mock()\n        mock_cfg.base_url = \"https://api.binance.com\"\n        mock_load_cfg.return_value = mock_cfg\n        \n        # Mock exchange info response\n        mock_response = Mock()\n        mock_response.ok = True\n        mock_response.json.return_value = {\"symbols\": []}\n        mock_get.return_value = mock_response\n        \n        broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n        \n        # Set up test filters manually\n        broker.filters[\"BTCUSDT\"] = BinanceFilters(\n            lot_size_min_qty=Decimal(\"0.001\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 169,
        "end": 183,
        "startLoc": {
          "line": 169,
          "column": 9,
          "position": 1255
        },
        "endLoc": {
          "line": 183,
          "column": 8,
          "position": 1369
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 133,
        "end": 147,
        "startLoc": {
          "line": 133,
          "column": 9,
          "position": 971
        },
        "endLoc": {
          "line": 147,
          "column": 10,
          "position": 1085
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "BinanceFilters(\n            lot_size_min_qty=Decimal(\"0.001\"),\n            lot_size_max_qty=Decimal(\"1000\"),\n            lot_size_step_size=Decimal(\"0.001\"),\n            price_filter_min_price=Decimal(\"0.01\"),\n            price_filter_max_price=Decimal(\"100000\"),\n            price_filter_tick_size=Decimal(\"0.01\"),\n            min_notional=Decimal(\"10.0\")\n        )\n        \n        # Test quantity too small",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 182,
        "end": 192,
        "startLoc": {
          "line": 182,
          "column": 2,
          "position": 1361
        },
        "endLoc": {
          "line": 192,
          "column": 26,
          "position": 1432
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker_old.py",
        "start": 49,
        "end": 58,
        "startLoc": {
          "line": 49,
          "column": 2,
          "position": 328
        },
        "endLoc": {
          "line": 58,
          "column": 2,
          "position": 397
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": "mock_cfg = Mock()\n        mock_cfg.base_url = \"https://api.binance.com\"\n        mock_load_cfg.return_value = mock_cfg\n        \n        # Mock exchange info response\n        mock_response = Mock()\n        mock_response.ok = True\n        mock_response.json.return_value = {\"symbols\": []}\n        mock_get.return_value = mock_response\n        \n        broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n        \n        # Set up test filters manually\n        broker.filters[\"BTCUSDT\"] = BinanceFilters(\n            lot_size_min_qty=Decimal(\"0.001\"),\n            lot_size_max_qty=Decimal(\"1000\"),\n            lot_size_step_size=Decimal(\"0.001\"),\n            price_filter_min_price=Decimal(\"0.01\"),\n            price_filter_max_price=Decimal(\"100000\"),\n            price_filter_tick_size=Decimal(\"0.01\"),\n            min_notional=Decimal(\"10.0\")\n        )\n        \n        # Test insufficient notional (0.001 * 1.0 = 0.001 < 10.0)",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 205,
        "end": 228,
        "startLoc": {
          "line": 205,
          "column": 9,
          "position": 1533
        },
        "endLoc": {
          "line": 228,
          "column": 58,
          "position": 1710
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 133,
        "end": 58,
        "startLoc": {
          "line": 133,
          "column": 9,
          "position": 971
        },
        "endLoc": {
          "line": 58,
          "column": 2,
          "position": 397
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "mock_cfg = Mock()\n        mock_cfg.base_url = \"https://api.binance.com\"\n        mock_load_cfg.return_value = mock_cfg\n        \n        # Mock exchange info response\n        mock_response = Mock()\n        mock_response.ok = True\n        mock_response.json.return_value = {\"symbols\": []}\n        mock_get.return_value = mock_response\n        \n        broker = ShadowBroker(symbols=[\"BTCUSDT\"],",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 240,
        "end": 250,
        "startLoc": {
          "line": 240,
          "column": 9,
          "position": 1802
        },
        "endLoc": {
          "line": 250,
          "column": 2,
          "position": 1891
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 133,
        "end": 143,
        "startLoc": {
          "line": 133,
          "column": 9,
          "position": 971
        },
        "endLoc": {
          "line": 143,
          "column": 2,
          "position": 1060
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        \n        # Set up test filters manually\n        broker.filters[\"BTCUSDT\"] = BinanceFilters(\n            lot_size_min_qty=Decimal(\"0.001\"),\n            lot_size_max_qty=Decimal(\"1000\"),\n            lot_size_step_size=Decimal(\"0.001\"),\n            price_filter_min_price=Decimal(\"0.01\"),\n            price_filter_max_price=Decimal(\"100000\"),\n            price_filter_tick_size=Decimal(\"0.01\"),\n            min_notional=Decimal(\"10.0\")\n        )\n        \n        result",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 250,
        "end": 263,
        "startLoc": {
          "line": 250,
          "column": 4,
          "position": 1896
        },
        "endLoc": {
          "line": 263,
          "column": 7,
          "position": 1984
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 179,
        "end": 58,
        "startLoc": {
          "line": 179,
          "column": 2,
          "position": 1344
        },
        "endLoc": {
          "line": 58,
          "column": 2,
          "position": 397
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": "mock_cfg = Mock()\n        mock_cfg.base_url = \"https://api.binance.com\"\n        mock_load_cfg.return_value = mock_cfg\n        \n        # Mock exchange info response\n        mock_response = Mock()\n        mock_response.ok = True\n        mock_response.json.return_value = {\"symbols\": []}\n        mock_get.return_value = mock_response\n        \n        broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n        \n        # Set up test filters manually\n        broker.filters[\"BTCUSDT\"] = BinanceFilters(\n            lot_size_min_qty=Decimal(\"0.001\"),\n            lot_size_max_qty=Decimal(\"1000\"),\n            lot_size_step_size=Decimal(\"0.001\"),\n            price_filter_min_price=Decimal(\"0.01\"),\n            price_filter_max_price=Decimal(\"100000\"),\n            price_filter_tick_size=Decimal(\"0.01\"),\n            min_notional=Decimal(\"10.0\")\n        )\n        \n        result = broker.submit_order(\"BTCUSDT\", \"BUY\", \"LIMIT\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 277,
        "end": 300,
        "startLoc": {
          "line": 277,
          "column": 9,
          "position": 2119
        },
        "endLoc": {
          "line": 300,
          "column": 8,
          "position": 2310
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 133,
        "end": 263,
        "startLoc": {
          "line": 133,
          "column": 9,
          "position": 971
        },
        "endLoc": {
          "line": 263,
          "column": 9,
          "position": 1998
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": "mock_cfg = Mock()\n        mock_cfg.base_url = \"https://api.binance.com\"\n        mock_load_cfg.return_value = mock_cfg\n        \n        # Mock exchange info response\n        mock_response = Mock()\n        mock_response.ok = True\n        mock_response.json.return_value = {\"symbols\": []}\n        mock_get.return_value = mock_response\n        \n        broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n        \n        # Set up test filters manually\n        broker.filters[\"BTCUSDT\"] = BinanceFilters(\n            lot_size_min_qty=Decimal(\"0.001\"),\n            lot_size_max_qty=Decimal(\"1000\"),\n            lot_size_step_size=Decimal(\"0.001\"),\n            price_filter_min_price=Decimal(\"0.01\"),\n            price_filter_max_price=Decimal(\"100000\"),\n            price_filter_tick_size=Decimal(\"0.01\"),\n            min_notional=Decimal(\"10.0\")\n        )\n        \n        # Submit order with invalid quantity",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 313,
        "end": 336,
        "startLoc": {
          "line": 313,
          "column": 9,
          "position": 2437
        },
        "endLoc": {
          "line": 336,
          "column": 37,
          "position": 2614
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 133,
        "end": 58,
        "startLoc": {
          "line": 133,
          "column": 9,
          "position": 971
        },
        "endLoc": {
          "line": 58,
          "column": 2,
          "position": 397
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": ")\n    def test_shadow_broker_initialization(self, mock_load_cfg, mock_get):\n        \"\"\"Test ShadowBroker initialization with proper config loading.\"\"\"\n        mock_cfg = Mock()\n        mock_cfg.base_url = \"https://api.binance.com\"\n        mock_cfg.api_key = \"test_key\"\n        mock_cfg.api_secret = \"test_secret\"\n        mock_load_cfg.return_value = mock_cfg\n        \n        # Mock exchange info response\n        mock_response = Mock()\n        mock_response.ok = True\n        mock_response.json.return_value = {\"symbols\": []}\n        mock_get.return_value = mock_response\n        \n        broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n        \n        assert \"BTCUSDT\" in broker.symbols\n        assert broker.slippage_bps == 2.0\n        mock_load_cfg.assert_called_once()\n    \n    @patch(\"requests.get\")\n    @patch('core.execution.shadow_broker.load_binance_cfg'",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 354,
        "end": 376,
        "startLoc": {
          "line": 354,
          "column": 48,
          "position": 2736
        },
        "endLoc": {
          "line": 376,
          "column": 48,
          "position": 2908
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 40,
        "end": 62,
        "startLoc": {
          "line": 40,
          "column": 48,
          "position": 276
        },
        "endLoc": {
          "line": 62,
          "column": 48,
          "position": 448
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": ")\n    def test_shadow_broker_with_custom_slippage(self, mock_load_cfg, mock_get):\n        \"\"\"Test ShadowBroker initialization with custom slippage config.\"\"\"\n        mock_cfg = Mock()\n        mock_cfg.base_url = \"https://api.binance.com\"\n        mock_cfg.api_key = \"test_key\"\n        mock_cfg.api_secret = \"test_secret\"\n        mock_load_cfg.return_value = mock_cfg\n        \n        # Mock exchange info response\n        mock_response = Mock()\n        mock_response.ok = True\n        mock_response.json.return_value = {\"symbols\": []}\n        mock_get.return_value = mock_response\n        \n        broker = ShadowBroker(symbols=[\"ETHUSDT\"], slippage_bps=5.0)\n        \n        assert \"ETHUSDT\" in broker.symbols\n        assert broker.slippage_bps == 5.0\n        mock_load_cfg.assert_called_once()\n    \n    @patch(\"core.execution.shadow_broker.load_binance_cfg\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 376,
        "end": 397,
        "startLoc": {
          "line": 376,
          "column": 48,
          "position": 2909
        },
        "endLoc": {
          "line": 397,
          "column": 48,
          "position": 3080
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 62,
        "end": 83,
        "startLoc": {
          "line": 62,
          "column": 48,
          "position": 449
        },
        "endLoc": {
          "line": 83,
          "column": 15,
          "position": 620
        }
      }
    },
    {
      "format": "python",
      "lines": 45,
      "fragment": "(self, mock_load_cfg, mock_get):\n        \"\"\"Test getting filters for symbol.\"\"\"\n        mock_cfg = Mock()\n        mock_cfg.base_url = \"https://api.binance.com\"\n        mock_load_cfg.return_value = mock_cfg\n        \n        # Mock exchange info response\n        mock_response = Mock()\n        mock_response.ok = True\n        mock_response.json.return_value = {\n            \"symbols\": [{\n                \"symbol\": \"BTCUSDT\",\n                \"status\": \"TRADING\",\n                \"filters\": [\n                    {\n                        \"filterType\": \"LOT_SIZE\",\n                        \"minQty\": \"0.00001000\",\n                        \"maxQty\": \"9000.00000000\",\n                        \"stepSize\": \"0.00001000\"\n                    },\n                    {\n                        \"filterType\": \"PRICE_FILTER\",\n                        \"minPrice\": \"0.01000000\",\n                        \"maxPrice\": \"1000000.00000000\",\n                        \"tickSize\": \"0.01000000\"\n                    },\n                    {\n                        \"filterType\": \"MIN_NOTIONAL\",\n                        \"minNotional\": \"10.00000000\"\n                    }\n                ]\n            }]\n        }\n        mock_get.return_value = mock_response\n        \n        broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n        filters = broker.get_filters(\"BTCUSDT\")\n        \n        assert filters is not None\n        assert filters.lot_size_min_qty == Decimal(\"0.00001000\")\n        assert filters.lot_size_max_qty == Decimal(\"9000.00000000\")\n        assert filters.lot_size_step_size == Decimal(\"0.00001000\")\n        assert filters.min_notional == Decimal(\"10.00000000\")\n    \n    @patch(\"core.execution.shadow_broker.load_binance_cfg\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 399,
        "end": 443,
        "startLoc": {
          "line": 399,
          "column": 15,
          "position": 3093
        },
        "endLoc": {
          "line": 443,
          "column": 48,
          "position": 3403
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 85,
        "end": 129,
        "startLoc": {
          "line": 85,
          "column": 17,
          "position": 633
        },
        "endLoc": {
          "line": 129,
          "column": 15,
          "position": 943
        }
      }
    },
    {
      "format": "python",
      "lines": 35,
      "fragment": "(self, mock_load_cfg, mock_get):\n        \"\"\"Test successful order validation and rounding.\"\"\"\n        mock_cfg = Mock()\n        mock_cfg.base_url = \"https://api.binance.com\"\n        mock_load_cfg.return_value = mock_cfg\n        \n        # Mock exchange info response\n        mock_response = Mock()\n        mock_response.ok = True\n        mock_response.json.return_value = {\"symbols\": []}\n        mock_get.return_value = mock_response\n        \n        broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n        \n        # Set up test filters manually\n        broker.filters[\"BTCUSDT\"] = BinanceFilters(\n            lot_size_min_qty=Decimal(\"0.00001\"),\n            lot_size_max_qty=Decimal(\"9000\"),\n            lot_size_step_size=Decimal(\"0.00001\"),\n            price_filter_min_price=Decimal(\"0.01\"),\n            price_filter_max_price=Decimal(\"1000000\"),\n            price_filter_tick_size=Decimal(\"0.01\"),\n            min_notional=Decimal(\"10.0\")\n        )\n        \n        is_valid, message, qty, price = broker.validate_and_round_order(\n            \"BTCUSDT\", \"BUY\", \"LIMIT\", 1.0, 50000.0\n        )\n        \n        assert is_valid is True\n        assert message == \"OK\"\n        assert qty == 1.0\n        assert price == 50000.0\n    \n    @patch(\"core.execution.shadow_broker.load_binance_cfg\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 445,
        "end": 479,
        "startLoc": {
          "line": 445,
          "column": 15,
          "position": 3416
        },
        "endLoc": {
          "line": 479,
          "column": 48,
          "position": 3687
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 131,
        "end": 165,
        "startLoc": {
          "line": 131,
          "column": 36,
          "position": 956
        },
        "endLoc": {
          "line": 165,
          "column": 15,
          "position": 1227
        }
      }
    },
    {
      "format": "python",
      "lines": 35,
      "fragment": "(self, mock_load_cfg, mock_get):\n        \"\"\"Test order validation with invalid quantity.\"\"\"\n        mock_cfg = Mock()\n        mock_cfg.base_url = \"https://api.binance.com\"\n        mock_load_cfg.return_value = mock_cfg\n        \n        # Mock exchange info response\n        mock_response = Mock()\n        mock_response.ok = True\n        mock_response.json.return_value = {\"symbols\": []}\n        mock_get.return_value = mock_response\n        \n        broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n        \n        # Set up test filters manually\n        broker.filters[\"BTCUSDT\"] = BinanceFilters(\n            lot_size_min_qty=Decimal(\"0.001\"),\n            lot_size_max_qty=Decimal(\"1000\"),\n            lot_size_step_size=Decimal(\"0.001\"),\n            price_filter_min_price=Decimal(\"0.01\"),\n            price_filter_max_price=Decimal(\"100000\"),\n            price_filter_tick_size=Decimal(\"0.01\"),\n            min_notional=Decimal(\"10.0\")\n        )\n        \n        # Test quantity too small\n        is_valid, message, qty, price = broker.validate_and_round_order(\n            \"BTCUSDT\", \"BUY\", \"LIMIT\", 0.0005, 50000.0\n        )\n        \n        assert is_valid is False\n        assert \"LOT_SIZE\" in message\n        assert \"Quantity\" in message\n    \n    @patch(\"core.execution.shadow_broker.load_binance_cfg\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 481,
        "end": 515,
        "startLoc": {
          "line": 481,
          "column": 15,
          "position": 3700
        },
        "endLoc": {
          "line": 515,
          "column": 48,
          "position": 3965
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 167,
        "end": 201,
        "startLoc": {
          "line": 167,
          "column": 47,
          "position": 1240
        },
        "endLoc": {
          "line": 201,
          "column": 15,
          "position": 1505
        }
      }
    },
    {
      "format": "python",
      "lines": 68,
      "fragment": "(self, mock_load_cfg, mock_get):\n        \"\"\"Test order validation with insufficient notional value.\"\"\"\n        mock_cfg = Mock()\n        mock_cfg.base_url = \"https://api.binance.com\"\n        mock_load_cfg.return_value = mock_cfg\n        \n        # Mock exchange info response\n        mock_response = Mock()\n        mock_response.ok = True\n        mock_response.json.return_value = {\"symbols\": []}\n        mock_get.return_value = mock_response\n        \n        broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n        \n        # Set up test filters manually\n        broker.filters[\"BTCUSDT\"] = BinanceFilters(\n            lot_size_min_qty=Decimal(\"0.001\"),\n            lot_size_max_qty=Decimal(\"1000\"),\n            lot_size_step_size=Decimal(\"0.001\"),\n            price_filter_min_price=Decimal(\"0.01\"),\n            price_filter_max_price=Decimal(\"100000\"),\n            price_filter_tick_size=Decimal(\"0.01\"),\n            min_notional=Decimal(\"10.0\")\n        )\n        \n        # Test insufficient notional (0.001 * 1.0 = 0.001 < 10.0)\n        is_valid, message, qty, price = broker.validate_and_round_order(\n            \"BTCUSDT\", \"BUY\", \"LIMIT\", 0.001, 1.0\n        )\n        \n        assert is_valid is False\n        assert \"MIN_NOTIONAL\" in message\n    \n    @patch(\"requests.get\")\n    @patch(\"core.execution.shadow_broker.load_binance_cfg\")\n    def test_submit_order_market_buy(self, mock_load_cfg, mock_get):\n        \"\"\"Test market buy order submission with slippage simulation.\"\"\"\n        mock_cfg = Mock()\n        mock_cfg.base_url = \"https://api.binance.com\"\n        mock_load_cfg.return_value = mock_cfg\n        \n        # Mock exchange info response\n        mock_response = Mock()\n        mock_response.ok = True\n        mock_response.json.return_value = {\"symbols\": []}\n        mock_get.return_value = mock_response\n        \n        broker = ShadowBroker(symbols=[\"BTCUSDT\"], slippage_bps=2.0)\n        \n        # Set up test filters manually\n        broker.filters[\"BTCUSDT\"] = BinanceFilters(\n            lot_size_min_qty=Decimal(\"0.001\"),\n            lot_size_max_qty=Decimal(\"1000\"),\n            lot_size_step_size=Decimal(\"0.001\"),\n            price_filter_min_price=Decimal(\"0.01\"),\n            price_filter_max_price=Decimal(\"100000\"),\n            price_filter_tick_size=Decimal(\"0.01\"),\n            min_notional=Decimal(\"10.0\")\n        )\n        \n        result = broker.submit_order(\"BTCUSDT\", \"BUY\", \"MARKET\", 1.0)\n        \n        assert result[\"status\"] == \"FILLED\"\n        assert result[\"symbol\"] == \"BTCUSDT\"\n        assert result[\"side\"] == \"BUY\"\n        assert result[\"type\"] == \"MARKET\"\n        assert result[\"executedQty\"] == \"1.000\"\n        assert",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 517,
        "end": 584,
        "startLoc": {
          "line": 517,
          "column": 15,
          "position": 3978
        },
        "endLoc": {
          "line": 584,
          "column": 7,
          "position": 4527
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 203,
        "end": 269,
        "startLoc": {
          "line": 203,
          "column": 47,
          "position": 1518
        },
        "endLoc": {
          "line": 269,
          "column": 24,
          "position": 2066
        }
      }
    },
    {
      "format": "python",
      "lines": 38,
      "fragment": "assert \"orderId\" in result\n        assert \"fills\" in result\n    \n    @patch(\"requests.get\")\n    @patch(\"core.execution.shadow_broker.load_binance_cfg\")\n    def test_submit_order_limit_order(self, mock_load_cfg, mock_get):\n        \"\"\"Test limit order submission at specified price.\"\"\"\n        mock_cfg = Mock()\n        mock_cfg.base_url = \"https://api.binance.com\"\n        mock_load_cfg.return_value = mock_cfg\n        \n        # Mock exchange info response\n        mock_response = Mock()\n        mock_response.ok = True\n        mock_response.json.return_value = {\"symbols\": []}\n        mock_get.return_value = mock_response\n        \n        broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n        \n        # Set up test filters manually\n        broker.filters[\"BTCUSDT\"] = BinanceFilters(\n            lot_size_min_qty=Decimal(\"0.001\"),\n            lot_size_max_qty=Decimal(\"1000\"),\n            lot_size_step_size=Decimal(\"0.001\"),\n            price_filter_min_price=Decimal(\"0.01\"),\n            price_filter_max_price=Decimal(\"100000\"),\n            price_filter_tick_size=Decimal(\"0.01\"),\n            min_notional=Decimal(\"10.0\")\n        )\n        \n        result = broker.submit_order(\"BTCUSDT\", \"BUY\", \"LIMIT\", 1.0, 50000.0)\n        \n        assert result[\"status\"] == \"FILLED\"\n        assert result[\"symbol\"] == \"BTCUSDT\"\n        assert result[\"side\"] == \"BUY\"\n        assert result[\"type\"] == \"LIMIT\"\n        assert result[\"executedQty\"] == \"1.000\"\n        assert",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 584,
        "end": 621,
        "startLoc": {
          "line": 584,
          "column": 9,
          "position": 4527
        },
        "endLoc": {
          "line": 621,
          "column": 7,
          "position": 4840
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 270,
        "end": 306,
        "startLoc": {
          "line": 270,
          "column": 9,
          "position": 2069
        },
        "endLoc": {
          "line": 306,
          "column": 24,
          "position": 2381
        }
      }
    },
    {
      "format": "python",
      "lines": 41,
      "fragment": "assert float(result[\"fills\"][0][\"price\"]) == 50000.0\n    \n    @patch(\"requests.get\")\n    @patch(\"core.execution.shadow_broker.load_binance_cfg\")\n    def test_submit_order_validation_failure(self, mock_load_cfg, mock_get):\n        \"\"\"Test order rejection due to validation failure.\"\"\"\n        mock_cfg = Mock()\n        mock_cfg.base_url = \"https://api.binance.com\"\n        mock_load_cfg.return_value = mock_cfg\n        \n        # Mock exchange info response\n        mock_response = Mock()\n        mock_response.ok = True\n        mock_response.json.return_value = {\"symbols\": []}\n        mock_get.return_value = mock_response\n        \n        broker = ShadowBroker(symbols=[\"BTCUSDT\"])\n        \n        # Set up test filters manually\n        broker.filters[\"BTCUSDT\"] = BinanceFilters(\n            lot_size_min_qty=Decimal(\"0.001\"),\n            lot_size_max_qty=Decimal(\"1000\"),\n            lot_size_step_size=Decimal(\"0.001\"),\n            price_filter_min_price=Decimal(\"0.01\"),\n            price_filter_max_price=Decimal(\"100000\"),\n            price_filter_tick_size=Decimal(\"0.01\"),\n            min_notional=Decimal(\"10.0\")\n        )\n        \n        # Submit order with invalid quantity\n        result = broker.submit_order(\"BTCUSDT\", \"BUY\", \"LIMIT\", 0.0005, 50000.0)\n        \n        # Fixed expected format for validation failure\n        assert \"code\" in result\n        assert result[\"code\"] == -1013\n        assert \"Filter failure\" in result[\"msg\"]\n        assert \"LOT_SIZE\" in result[\"msg\"]\n\n\nif __name__ == \"__main__\":\n    unittest.main()",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 621,
        "end": 661,
        "startLoc": {
          "line": 621,
          "column": 9,
          "position": 4840
        },
        "endLoc": {
          "line": 661,
          "column": 2,
          "position": 5163
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_shadow_broker.py",
        "start": 307,
        "end": 347,
        "startLoc": {
          "line": 307,
          "column": 9,
          "position": 2384
        },
        "endLoc": {
          "line": 347,
          "column": 2,
          "position": 2707
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "mock_adapter = Mock()\n        mock_adapter.symbol = \"BTCUSDT\"\n        mock_adapter.fetch_top_of_book.return_value = (100.0, 0.01, [(99.99, 1.0)], [(100.01, 1.0)], [])\n        mock_create_adapter.return_value = mock_adapter\n        \n        with patch.dict(os.environ, {\n            'AURORA_MAX_TICKS': '1'",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_run_live_aurora_complete.py",
        "start": 245,
        "end": 251,
        "startLoc": {
          "line": 245,
          "column": 9,
          "position": 2081
        },
        "endLoc": {
          "line": 251,
          "column": 4,
          "position": 2167
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_run_live_aurora_complete.py",
        "start": 222,
        "end": 227,
        "startLoc": {
          "line": 222,
          "column": 9,
          "position": 1836
        },
        "endLoc": {
          "line": 227,
          "column": 4,
          "position": 1920
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "mock_adapter = Mock()\n        mock_adapter.symbol = \"BTCUSDT\"\n        mock_adapter.fetch_top_of_book.return_value = (100.0, 0.01, [(99.99, 1.0)], [(100.01, 1.0)], [])\n        mock_create_adapter.return_value = mock_adapter\n        \n        with patch.dict(os.environ, {'AURORA_MAX_TICKS': '1'}",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_run_live_aurora_complete.py",
        "start": 280,
        "end": 285,
        "startLoc": {
          "line": 280,
          "column": 9,
          "position": 2444
        },
        "endLoc": {
          "line": 285,
          "column": 2,
          "position": 2529
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_run_live_aurora_complete.py",
        "start": 222,
        "end": 251,
        "startLoc": {
          "line": 222,
          "column": 9,
          "position": 1836
        },
        "endLoc": {
          "line": 251,
          "column": 2,
          "position": 2168
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "mock_create_adapter.return_value = mock_adapter\n        \n        with patch.dict(os.environ, {'AURORA_MAX_TICKS': '1'}):\n            with patch('skalp_bot.runner.run_live_aurora.AuroraGate') as mock_gate:\n                mock_gate_instance = Mock()\n                mock_gate_instance.check.return_value = {\"allow\": True}\n                mock_gate.return_value = mock_gate_instance\n                \n                with patch('skalp_bot.runner.run_live_aurora.time.sleep'",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_run_live_aurora_complete.py",
        "start": 330,
        "end": 338,
        "startLoc": {
          "line": 330,
          "column": 9,
          "position": 2988
        },
        "endLoc": {
          "line": 338,
          "column": 46,
          "position": 3073
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_run_live_aurora_complete.py",
        "start": 283,
        "end": 291,
        "startLoc": {
          "line": 283,
          "column": 9,
          "position": 2502
        },
        "endLoc": {
          "line": 291,
          "column": 47,
          "position": 2587
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "with patch.dict(os.environ, {'AURORA_MAX_TICKS': '1'}):\n                with patch('skalp_bot.runner.run_live_aurora.create_adapter') as mock_create_adapter:\n                    mock_adapter = Mock()\n                    mock_adapter.fetch_top_of_book.return_value = (100.0, 0.01, [], [], [])\n                    mock_create_adapter.return_value = mock_adapter\n                    \n                    with patch('skalp_bot.runner.run_live_aurora.time.sleep'",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_run_live_aurora_complete.py",
        "start": 352,
        "end": 358,
        "startLoc": {
          "line": 352,
          "column": 13,
          "position": 3190
        },
        "endLoc": {
          "line": 358,
          "column": 46,
          "position": 3276
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_run_live_aurora_complete.py",
        "start": 205,
        "end": 211,
        "startLoc": {
          "line": 205,
          "column": 9,
          "position": 1662
        },
        "endLoc": {
          "line": 211,
          "column": 46,
          "position": 1748
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "def setup_method(self):\n        \"\"\"Setup test fixtures.\"\"\"\n        self.config = {\n            \"execution\": {\n                \"edge_floor_bps\": 1.0,\n                \"router\": {\n                    \"horizon_ms\": 1500,\n                    \"p_min_fill\": 0.25,\n                    \"spread_deny_bps\": 8.0,\n                    \"maker_spread_ok_bps\": 2.0,\n                    \"switch_margin_bps\": 0.0\n                },\n                \"sla\": {\n                    \"kappa_bps_per_ms\": 0.01,\n                    \"max_latency_ms\": 250\n                }\n            }\n        }\n        self.router = Router(self.config)\n\n    def test_decide_sla_latency_deny",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_router_new.py",
        "start": 180,
        "end": 200,
        "startLoc": {
          "line": 180,
          "column": 5,
          "position": 1281
        },
        "endLoc": {
          "line": 200,
          "column": 29,
          "position": 1404
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_router_new.py",
        "start": 116,
        "end": 136,
        "startLoc": {
          "line": 116,
          "column": 5,
          "position": 790
        },
        "endLoc": {
          "line": 136,
          "column": 29,
          "position": 913
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "def setup_method(self):\n        \"\"\"Setup test fixtures.\"\"\"\n        self.fees = Fees(maker_fee_bps=0.1, taker_fee_bps=0.5)\n        self.sla = SLAGate(max_latency_ms=50.0, kappa_bps_per_ms=0.1, min_edge_after_bps=0.0)\n        self.router = Router(\n            slagate=self.sla,\n            min_p_fill=0.5,\n            fees=self.fees\n        )\n\n    def test_estimate_p_fill_no_hazard",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_router_backup.py",
        "start": 340,
        "end": 350,
        "startLoc": {
          "line": 340,
          "column": 5,
          "position": 2461
        },
        "endLoc": {
          "line": 350,
          "column": 31,
          "position": 2553
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_router_backup.py",
        "start": 169,
        "end": 179,
        "startLoc": {
          "line": 169,
          "column": 5,
          "position": 1242
        },
        "endLoc": {
          "line": 179,
          "column": 38,
          "position": 1334
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "def setup_method(self):\n        \"\"\"Setup test fixtures.\"\"\"\n        self.fees = Fees(maker_fee_bps=0.1, taker_fee_bps=0.5)\n        self.sla = SLAGate(max_latency_ms=50.0, kappa_bps_per_ms=0.1, min_edge_after_bps=0.0)\n        self.router = Router(\n            slagate=self.sla,\n            min_p_fill=0.5,\n            fees=self.fees\n        )\n\n    def test_decide_creates_log_entry",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_router_backup.py",
        "start": 410,
        "end": 420,
        "startLoc": {
          "line": 410,
          "column": 5,
          "position": 2965
        },
        "endLoc": {
          "line": 420,
          "column": 30,
          "position": 3057
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_router_backup.py",
        "start": 169,
        "end": 179,
        "startLoc": {
          "line": 169,
          "column": 5,
          "position": 1242
        },
        "endLoc": {
          "line": 179,
          "column": 38,
          "position": 1334
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "assert hasattr(decision, 'e_maker_bps')\n        assert hasattr(decision, 'e_taker_bps')\n        assert hasattr(decision, 'p_fill')\n        assert hasattr(decision, 'reason')\n        assert hasattr(decision, 'maker_fee_bps')\n        assert hasattr(decision, 'taker_fee_bps')\n        assert hasattr(decision, 'net_e_maker_bps')\n        assert hasattr(decision, 'net_e_taker_bps')\n        assert",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_router_backup.py",
        "start": 439,
        "end": 447,
        "startLoc": {
          "line": 439,
          "column": 9,
          "position": 3196
        },
        "endLoc": {
          "line": 447,
          "column": 7,
          "position": 3284
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_xai_decision_trail.py",
        "start": 63,
        "end": 72,
        "startLoc": {
          "line": 63,
          "column": 9,
          "position": 414
        },
        "endLoc": {
          "line": 72,
          "column": 24,
          "position": 512
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "def setup_method(self):\n        \"\"\"Setup test fixtures.\"\"\"\n        self.fees = Fees(maker_fee_bps=0.1, taker_fee_bps=0.5)\n        self.sla = SLAGate(max_latency_ms=50.0, kappa_bps_per_ms=0.1, min_edge_after_bps=0.0)\n        self.router = Router(\n            slagate=self.sla,\n            min_p_fill=0.5,\n            fees=self.fees\n        )\n\n    def test_decide_with_empty_features",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_router_backup.py",
        "start": 453,
        "end": 463,
        "startLoc": {
          "line": 453,
          "column": 5,
          "position": 3306
        },
        "endLoc": {
          "line": 463,
          "column": 32,
          "position": 3398
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_router_backup.py",
        "start": 169,
        "end": 179,
        "startLoc": {
          "line": 169,
          "column": 5,
          "position": 1242
        },
        "endLoc": {
          "line": 179,
          "column": 38,
          "position": 1334
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "position = PositionData(\n            position_id=\"test_1\",\n            symbol=\"BTCUSDT\", \n            side=\"BUY\",\n            state=PositionState.FLAT,\n            target_qty=0.001,\n            current_qty=0.0,\n            entry_price=None,\n            \n            exit_reason=None,\n            created_ts=int(time.time()),\n            last_update_ts=int(time.time()),\n        )\n        \n        result = fsm.process_event(position, PositionEvent.EDGE_CHANGE)\n        \n        assert result.success is False",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 51,
        "end": 67,
        "startLoc": {
          "line": 51,
          "column": 9,
          "position": 339
        },
        "endLoc": {
          "line": 67,
          "column": 6,
          "position": 458
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 25,
        "end": 41,
        "startLoc": {
          "line": 25,
          "column": 9,
          "position": 155
        },
        "endLoc": {
          "line": 41,
          "column": 5,
          "position": 273
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "fsm = PositionFSM()\n        position = PositionData(\n            position_id=\"test_1\",\n            symbol=\"BTCUSDT\",\n            side=\"BUY\", \n            state=PositionState.FLAT,\n            target_qty=0.001,\n            current_qty=0.0,\n            entry_price=None,\n            \n            exit_reason=None,\n            created_ts=int(time.time()),\n            last_update_ts=int(time.time()),\n        )\n        \n        # Пробуємо неможливий перехід",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 72,
        "end": 87,
        "startLoc": {
          "line": 72,
          "column": 9,
          "position": 485
        },
        "endLoc": {
          "line": 87,
          "column": 30,
          "position": 586
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 24,
        "end": 39,
        "startLoc": {
          "line": 24,
          "column": 9,
          "position": 146
        },
        "endLoc": {
          "line": 39,
          "column": 7,
          "position": 246
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "fsm = PositionFSM()\n        position = PositionData(\n            position_id=\"test_1\",\n            symbol=\"BTCUSDT\",\n            side=\"BUY\",\n            state=PositionState.ENTRY_PENDING,\n            target_qty=0.001,\n            current_qty=0.0,\n            entry_price=None,\n            \n            exit_reason=None,\n            created_ts=int(time.time()),\n            last_update_ts=int(time.time()),\n        )\n        \n        result",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 119,
        "end": 134,
        "startLoc": {
          "line": 119,
          "column": 9,
          "position": 831
        },
        "endLoc": {
          "line": 134,
          "column": 7,
          "position": 931
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 95,
        "end": 110,
        "startLoc": {
          "line": 95,
          "column": 9,
          "position": 643
        },
        "endLoc": {
          "line": 110,
          "column": 11,
          "position": 743
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ",\n            target_qty=0.001,\n            current_qty=0.0,\n            entry_price=None,\n            \n            exit_reason=None,\n            created_ts=int(time.time()),\n            last_update_ts=int(time.time()),\n        )\n        \n        result = fsm.process_event(position, PositionEvent.RISK_DENY",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 124,
        "end": 134,
        "startLoc": {
          "line": 124,
          "column": 14,
          "position": 871
        },
        "endLoc": {
          "line": 134,
          "column": 10,
          "position": 944
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 29,
        "end": 39,
        "startLoc": {
          "line": 29,
          "column": 5,
          "position": 186
        },
        "endLoc": {
          "line": 39,
          "column": 12,
          "position": 259
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "fsm = PositionFSM()\n        position = PositionData(\n            position_id=\"test_1\",\n            symbol=\"BTCUSDT\",\n            side=\"BUY\",\n            state=PositionState.OPEN,\n            target_qty=0.001,\n            current_qty=0.001,\n            entry_price=50000.0,\n            \n            exit_reason=None,\n            created_ts=int(time.time()),\n            last_update_ts=int(time.time()),\n        )\n        \n        result = fsm.process_event(position, PositionEvent.SCALE_SIGNAL",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 168,
        "end": 183,
        "startLoc": {
          "line": 168,
          "column": 9,
          "position": 1198
        },
        "endLoc": {
          "line": 183,
          "column": 13,
          "position": 1311
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 144,
        "end": 159,
        "startLoc": {
          "line": 144,
          "column": 9,
          "position": 1020
        },
        "endLoc": {
          "line": 159,
          "column": 16,
          "position": 1133
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "fsm = PositionFSM()\n        position = PositionData(\n            position_id=\"test_1\",\n            symbol=\"BTCUSDT\",\n            side=\"BUY\",\n            state=PositionState.OPEN,\n            target_qty=0.001,\n            current_qty=0.001,\n            entry_price=50000.0,\n            \n            exit_reason=None,\n            created_ts=int(time.time()),\n            last_update_ts=int(time.time()),\n        )\n        \n        result = fsm.process_event(position, PositionEvent.TRAIL_HIT",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 264,
        "end": 279,
        "startLoc": {
          "line": 264,
          "column": 9,
          "position": 1928
        },
        "endLoc": {
          "line": 279,
          "column": 10,
          "position": 2041
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 144,
        "end": 159,
        "startLoc": {
          "line": 144,
          "column": 9,
          "position": 1020
        },
        "endLoc": {
          "line": 159,
          "column": 16,
          "position": 1133
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "fsm = PositionFSM()\n        position = PositionData(\n            position_id=\"test_1\",\n            symbol=\"BTCUSDT\",\n            side=\"BUY\",\n            state=PositionState.OPEN,\n            target_qty=0.001,\n            current_qty=0.001,\n            entry_price=50000.0,\n            \n            exit_reason=None,\n            created_ts=int(time.time()),\n            last_update_ts=int(time.time()),\n        )\n        \n        result = fsm.process_event(position, PositionEvent.TP_HIT",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 286,
        "end": 301,
        "startLoc": {
          "line": 286,
          "column": 9,
          "position": 2084
        },
        "endLoc": {
          "line": 301,
          "column": 7,
          "position": 2197
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 144,
        "end": 159,
        "startLoc": {
          "line": 144,
          "column": 9,
          "position": 1020
        },
        "endLoc": {
          "line": 159,
          "column": 16,
          "position": 1133
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "fsm = PositionFSM()\n        position = PositionData(\n            position_id=\"test_1\",\n            symbol=\"BTCUSDT\",\n            side=\"BUY\",\n            state=PositionState.ENTRY_PENDING,\n            target_qty=0.001,\n            current_qty=0.0,\n            entry_price=None,\n            \n            exit_reason=None,\n            created_ts=int(time.time()),\n            last_update_ts=int(time.time()),\n        )\n        \n        result = fsm.process_event(position, PositionEvent.TTL_EXPIRED",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 308,
        "end": 323,
        "startLoc": {
          "line": 308,
          "column": 9,
          "position": 2240
        },
        "endLoc": {
          "line": 323,
          "column": 12,
          "position": 2353
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 95,
        "end": 39,
        "startLoc": {
          "line": 95,
          "column": 9,
          "position": 643
        },
        "endLoc": {
          "line": 39,
          "column": 12,
          "position": 259
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "fsm = PositionFSM()\n        position = PositionData(\n            position_id=\"test_1\",\n            symbol=\"BTCUSDT\",\n            side=\"BUY\",\n            state=PositionState.ENTRY_PENDING,\n            target_qty=0.001,\n            current_qty=0.0,\n            entry_price=None,\n            \n            exit_reason=None,\n            created_ts=int(time.time()),\n            last_update_ts=int(time.time()),\n        )\n        \n        result = fsm.process_event(position, PositionEvent.EXCHANGE_REJECT",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 330,
        "end": 345,
        "startLoc": {
          "line": 330,
          "column": 9,
          "position": 2396
        },
        "endLoc": {
          "line": 345,
          "column": 16,
          "position": 2509
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 95,
        "end": 39,
        "startLoc": {
          "line": 95,
          "column": 9,
          "position": 643
        },
        "endLoc": {
          "line": 39,
          "column": 12,
          "position": 259
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "fsm = PositionFSM()\n        position = PositionData(\n            position_id=\"test_1\",\n            symbol=\"BTCUSDT\",\n            side=\"BUY\",\n            state=PositionState.FLAT,\n            target_qty=0.001,\n            current_qty=0.0,\n            entry_price=None,\n            exit_reason=None,\n            created_ts=int(time.time()),\n            last_update_ts=int(time.time()),\n        )\n\n        initial_ts",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 352,
        "end": 366,
        "startLoc": {
          "line": 352,
          "column": 9,
          "position": 2552
        },
        "endLoc": {
          "line": 366,
          "column": 11,
          "position": 2649
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 24,
        "end": 39,
        "startLoc": {
          "line": 24,
          "column": 9,
          "position": 146
        },
        "endLoc": {
          "line": 39,
          "column": 7,
          "position": 246
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "fsm = PositionFSM()\n        position = PositionData(\n            position_id=\"test_1\",\n            symbol=\"BTCUSDT\",\n            side=\"BUY\",\n            state=PositionState.ENTRY_PENDING,\n            target_qty=0.001,\n            current_qty=0.0,\n            entry_price=None,\n            \n            exit_reason=None,\n            created_ts=int(time.time()),\n            last_update_ts=int(time.time()),\n        )\n        \n        # Тест автоматичного встановлення exit_reason",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 403,
        "end": 418,
        "startLoc": {
          "line": 403,
          "column": 9,
          "position": 2918
        },
        "endLoc": {
          "line": 418,
          "column": 46,
          "position": 3018
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 95,
        "end": 110,
        "startLoc": {
          "line": 95,
          "column": 9,
          "position": 643
        },
        "endLoc": {
          "line": 110,
          "column": 11,
          "position": 743
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "fsm = PositionFSM()\n        position = PositionData(\n            position_id=\"test_1\",\n            symbol=\"BTCUSDT\",\n            side=\"BUY\",\n            state=PositionState.SCALE_IN_PENDING,\n            target_qty=0.002,\n            current_qty=0.001,\n            entry_price=50000.0,\n            \n            exit_reason=None,\n            created_ts=int(time.time()),\n            last_update_ts=int(time.time()),\n        )\n        \n        result",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 426,
        "end": 441,
        "startLoc": {
          "line": 426,
          "column": 9,
          "position": 3075
        },
        "endLoc": {
          "line": 441,
          "column": 7,
          "position": 3175
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 190,
        "end": 205,
        "startLoc": {
          "line": 190,
          "column": 9,
          "position": 1354
        },
        "endLoc": {
          "line": 205,
          "column": 11,
          "position": 1454
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ",\n            \n            exit_reason=None,\n            created_ts=int(time.time()),\n            last_update_ts=int(time.time()),\n        )\n        \n        result = fsm.process_event(position, PositionEvent.RISK_DENY)\n        \n        assert result.success is True\n        assert result.new_state == PositionState.OPEN",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 434,
        "end": 444,
        "startLoc": {
          "line": 434,
          "column": 8,
          "position": 3133
        },
        "endLoc": {
          "line": 444,
          "column": 5,
          "position": 3215
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_position_fsm_complete.py",
        "start": 127,
        "end": 137,
        "startLoc": {
          "line": 127,
          "column": 5,
          "position": 889
        },
        "endLoc": {
          "line": 137,
          "column": 5,
          "position": 971
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "'score': 2.0,\n            'a_bps': 1.0,\n            'b_bps': 2.0,\n            'slip_bps_est': 0.1,\n            'spread_bps': 50.0\n        }\n        fees_bps = 0.1\n\n        allow, reason, obs, risk_scale = pipeline.decide(\n            account=account, order=order, market=market, fees_bps=fees_bps\n        )\n\n        assert allow is True",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_pipeline.py",
        "start": 89,
        "end": 101,
        "startLoc": {
          "line": 89,
          "column": 13,
          "position": 572
        },
        "endLoc": {
          "line": 101,
          "column": 5,
          "position": 666
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_pipeline.py",
        "start": 65,
        "end": 77,
        "startLoc": {
          "line": 65,
          "column": 13,
          "position": 366
        },
        "endLoc": {
          "line": 77,
          "column": 6,
          "position": 460
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "'score': 2.0,\n            'a_bps': 1.0,\n            'b_bps': 2.0,\n            'slip_bps_est': 0.1,\n            'spread_bps': 50.0\n        }\n        fees_bps = 0.1\n\n        allow, reason, obs, risk_scale = pipeline.decide(\n            account=account, order=order, market=market, fees_bps=fees_bps\n        )\n\n        assert allow is True\n        assert reason == 'ok'\n\n    def",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_pipeline.py",
        "start": 113,
        "end": 128,
        "startLoc": {
          "line": 113,
          "column": 13,
          "position": 766
        },
        "endLoc": {
          "line": 128,
          "column": 4,
          "position": 873
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_pipeline.py",
        "start": 65,
        "end": 103,
        "startLoc": {
          "line": 65,
          "column": 13,
          "position": 366
        },
        "endLoc": {
          "line": 103,
          "column": 7,
          "position": 678
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "'score': 2.0,\n            'a_bps': 1.0,\n            'b_bps': 2.0,\n            'slip_bps_est': 0.1,\n            'spread_bps': 50.0\n        }\n        fees_bps = 0.1\n\n        allow, reason, obs, risk_scale = pipeline.decide(\n            account=account, order=order, market=market, fees_bps=fees_bps\n        )\n\n        assert allow is True\n        assert reason == 'ok'\n        assert obs['gate_state'] == 'PASS'\n        assert",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_pipeline.py",
        "start": 332,
        "end": 347,
        "startLoc": {
          "line": 332,
          "column": 13,
          "position": 2549
        },
        "endLoc": {
          "line": 347,
          "column": 7,
          "position": 2667
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_pipeline.py",
        "start": 65,
        "end": 105,
        "startLoc": {
          "line": 65,
          "column": 13,
          "position": 366
        },
        "endLoc": {
          "line": 105,
          "column": 4,
          "position": 691
        }
      }
    },
    {
      "format": "python",
      "lines": 28,
      "fragment": "from core.infra.idempotency_store import IdempotencyStore\r\n\r\n\r\ndef test_put_get_seen_and_sweep():\r\n    # deterministic now_ns for testing\r\n    now_ns = lambda: 1_000_000_000\r\n    store = IdempotencyStore(ttl_sec=3600, now_ns_fn=now_ns)\r\n    key = \"op-123\"\r\n    assert not store.seen(key)\r\n    store.put(key, {\"ok\": True})\r\n    assert store.seen(key)\r\n    assert store.get(key) == {\"ok\": True}\r\n    # sweep should remove nothing for large ttl\r\n    removed = store.sweep()\r\n    assert removed == 0\r\n\r\n\r\ndef test_sweep_removes_expired():\r\n    t = [1_000_000_000]\r\n    now_ns = lambda: t[0]\r\n    store = IdempotencyStore(ttl_sec=0.000001, now_ns_fn=now_ns)  # tiny ttl\r\n    store.put(\"k\", 1)\r\n    assert store.seen(\"k\")\r\n    # advance time beyond ttl\r\n    t[0] += int(1e9)\r\n    removed = store.sweep()\r\n    assert removed == 1\r\n    assert not store.seen(\"k\")",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_idempotency_store_basic.py",
        "start": 29,
        "end": 56,
        "startLoc": {
          "line": 29,
          "column": 1,
          "position": 285
        },
        "endLoc": {
          "line": 56,
          "column": 2,
          "position": 567
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_idempotency_store_basic.py",
        "start": 1,
        "end": 28,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 28,
          "column": 2,
          "position": 282
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": "# Prevent dotenv from loading any external .env file\n        mock_load_dotenv.return_value = None\n        \n        # Ensure no testnet variables are present\n        testnet_vars = [\n            'BINANCE_API_KEY_TESTNET', 'BINANCE_API_SECRET_TESTNET',\n            'BINANCE_USDM_BASE_URL_TESTNET', 'BINANCE_USDM_WS_URL_TESTNET'\n        ]\n        for var in testnet_vars:\n            if var in os.environ:\n                del os.environ[var]\n        \n        with pytest.raises(RuntimeError, match=\"Missing live credentials\"):\n            load_binance_cfg()\n    \n    @patch('core.env_config.load_dotenv')  # Mock dotenv loading\n    @patch.dict(os.environ, {\n        'BINANCE_ENV': 'live',\n        'BINANCE_API_KEY_LIVE': 'live_key'",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_env_config_guards.py",
        "start": 183,
        "end": 201,
        "startLoc": {
          "line": 183,
          "column": 9,
          "position": 1238
        },
        "endLoc": {
          "line": 201,
          "column": 11,
          "position": 1365
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_env_config_guards.py",
        "start": 160,
        "end": 178,
        "startLoc": {
          "line": 160,
          "column": 9,
          "position": 1077
        },
        "endLoc": {
          "line": 178,
          "column": 6,
          "position": 1204
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")\r\n        breaker = ExchangeCircuitBreaker(config)\r\n        \r\n        # Set initial time\r\n        mock_time.return_value = 1000.0\r\n        \r\n        # Trigger failures to open circuit\r\n        for i in range(2):\r\n            with pytest.raises(Exception):\r\n                breaker.call(lambda: exec('raise Exception(\"test error\")'))\r\n        \r\n        # Time passes beyond recovery timeout\r\n        mock_time.return_value = 1002.0\r\n        \r\n        # Transition to HALF_OPEN\r\n        breaker.call(lambda: \"success\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_circuit_breaker.py",
        "start": 137,
        "end": 152,
        "startLoc": {
          "line": 137,
          "column": 9,
          "position": 1067
        },
        "endLoc": {
          "line": 152,
          "column": 10,
          "position": 1174
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_circuit_breaker.py",
        "start": 103,
        "end": 118,
        "startLoc": {
          "line": 103,
          "column": 9,
          "position": 805
        },
        "endLoc": {
          "line": 118,
          "column": 11,
          "position": 912
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "cfg = {\"symbol\": \"BTCUSDT\"}\n        adapter = CCXTBinanceAdapter(cfg)\n        \n        mid, spread, bids, asks, trades = adapter.fetch_top_of_book()\n        \n        assert mid == 0.0\n        assert spread == 0.0\n        assert bids == []\n        assert asks == []\n        assert trades == []\n\n    @patch('ccxt.binanceusdm')\n    def test_place_order_dry_run",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\unit\\test_ccxt_binance_complete.py",
        "start": 172,
        "end": 184,
        "startLoc": {
          "line": 172,
          "column": 9,
          "position": 1330
        },
        "endLoc": {
          "line": 184,
          "column": 25,
          "position": 1436
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_ccxt_binance_complete.py",
        "start": 153,
        "end": 165,
        "startLoc": {
          "line": 153,
          "column": 9,
          "position": 1175
        },
        "endLoc": {
          "line": 165,
          "column": 33,
          "position": 1281
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "}\n        \n        with tempfile.TemporaryDirectory() as tmpdir:\n            out_json = os.path.join(tmpdir, \"metrics.json\")\n            with open(out_json, 'w') as f:\n                json.dump(mock_metrics, f)\n                \n            with patch('subprocess.run') as mock_subprocess:\n                mock_subprocess.return_value = MagicMock()\n                \n                run_replay",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\research\\test_replay_adapter.py",
        "start": 134,
        "end": 144,
        "startLoc": {
          "line": 134,
          "column": 4,
          "position": 936
        },
        "endLoc": {
          "line": 144,
          "column": 11,
          "position": 1027
        }
      },
      "secondFile": {
        "name": "tests\\research\\test_replay_adapter.py",
        "start": 82,
        "end": 92,
        "startLoc": {
          "line": 82,
          "column": 9,
          "position": 520
        },
        "endLoc": {
          "line": 92,
          "column": 7,
          "position": 611
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "}\n        \n        with tempfile.TemporaryDirectory() as tmpdir:\n            out_json = os.path.join(tmpdir, \"metrics.json\")\n            with open(out_json, 'w') as f:\n                json.dump(mock_metrics, f)\n                \n            with patch('subprocess.run') as mock_subprocess:\n                mock_subprocess.return_value = MagicMock()\n                \n                run_replay(\n                    {",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\research\\test_replay_adapter.py",
        "start": 161,
        "end": 172,
        "startLoc": {
          "line": 161,
          "column": 4,
          "position": 1187
        },
        "endLoc": {
          "line": 172,
          "column": 2,
          "position": 1282
        }
      },
      "secondFile": {
        "name": "tests\\research\\test_replay_adapter.py",
        "start": 82,
        "end": 144,
        "startLoc": {
          "line": 82,
          "column": 9,
          "position": 520
        },
        "endLoc": {
          "line": 144,
          "column": 13,
          "position": 1029
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "import importlib.util\n        \n        # Import live_feed module\n        live_feed_path = Path(__file__).parent.parent.parent / \"tools\" / \"live_feed.py\"\n        spec = importlib.util.spec_from_file_location(\"live_feed\", live_feed_path)\n        live_feed = importlib.util.module_from_spec(spec)\n        spec.loader.exec_module(live_feed)\n        \n        # Test Starlette availability check",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\integration\\test_p3d_live_dashboard.py",
        "start": 129,
        "end": 137,
        "startLoc": {
          "line": 129,
          "column": 9,
          "position": 915
        },
        "endLoc": {
          "line": 137,
          "column": 36,
          "position": 994
        }
      },
      "secondFile": {
        "name": "tests\\integration\\test_p3d_live_dashboard.py",
        "start": 69,
        "end": 77,
        "startLoc": {
          "line": 69,
          "column": 9,
          "position": 427
        },
        "endLoc": {
          "line": 77,
          "column": 22,
          "position": 506
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "import importlib.util\n    \n    # Import live_feed module\n    live_feed_path = Path(__file__).parent.parent.parent / \"tools\" / \"live_feed.py\"\n    spec = importlib.util.spec_from_file_location(\"live_feed\", live_feed_path)\n    live_feed = importlib.util.module_from_spec(spec)\n    spec.loader.exec_module(live_feed)\n    \n    # Check main function exists",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\integration\\test_p3d_live_dashboard.py",
        "start": 159,
        "end": 167,
        "startLoc": {
          "line": 159,
          "column": 5,
          "position": 1137
        },
        "endLoc": {
          "line": 167,
          "column": 29,
          "position": 1216
        }
      },
      "secondFile": {
        "name": "tests\\integration\\test_p3d_live_dashboard.py",
        "start": 69,
        "end": 77,
        "startLoc": {
          "line": 69,
          "column": 9,
          "position": 427
        },
        "endLoc": {
          "line": 77,
          "column": 22,
          "position": 506
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "import importlib.util\n        \n        # Import live_feed module\n        live_feed_path = Path(__file__).parent.parent.parent / \"tools\" / \"live_feed.py\"\n        spec = importlib.util.spec_from_file_location(\"live_feed\", live_feed_path)\n        live_feed = importlib.util.module_from_spec(spec)\n        spec.loader.exec_module(live_feed)\n        \n        # Create aggregator and tailer",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\integration\\test_p3d_hardening.py",
        "start": 63,
        "end": 71,
        "startLoc": {
          "line": 63,
          "column": 9,
          "position": 354
        },
        "endLoc": {
          "line": 71,
          "column": 31,
          "position": 433
        }
      },
      "secondFile": {
        "name": "tests\\integration\\test_p3d_live_dashboard.py",
        "start": 69,
        "end": 77,
        "startLoc": {
          "line": 69,
          "column": 9,
          "position": 427
        },
        "endLoc": {
          "line": 77,
          "column": 22,
          "position": 506
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "import importlib.util\n        \n        # Import live_feed module\n        live_feed_path = Path(__file__).parent.parent.parent / \"tools\" / \"live_feed.py\"\n        spec = importlib.util.spec_from_file_location(\"live_feed\", live_feed_path)\n        live_feed = importlib.util.module_from_spec(spec)\n        spec.loader.exec_module(live_feed)\n        \n        # Create aggregator and tailer\n        aggregator = live_feed.LiveAggregator(300)\n        tailer = live_feed.JSONLTailer(temp_session_with_logs, aggregator)\n        \n        # Add oversized line",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\integration\\test_p3d_hardening.py",
        "start": 98,
        "end": 110,
        "startLoc": {
          "line": 98,
          "column": 9,
          "position": 641
        },
        "endLoc": {
          "line": 110,
          "column": 21,
          "position": 752
        }
      },
      "secondFile": {
        "name": "tests\\integration\\test_p3d_live_dashboard.py",
        "start": 69,
        "end": 75,
        "startLoc": {
          "line": 69,
          "column": 9,
          "position": 427
        },
        "endLoc": {
          "line": 75,
          "column": 33,
          "position": 465
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "import importlib.util\n\n        # Import live_feed module\n        live_feed_path = Path(__file__).parent.parent.parent / \"tools\" / \"live_feed.py\"\n        spec = importlib.util.spec_from_file_location(\"live_feed\", live_feed_path)\n        live_feed = importlib.util.module_from_spec(spec)\n        spec.loader.exec_module(live_feed)\n\n        # Create aggregator and tailer\n        aggregator = live_feed.LiveAggregator(window_minutes",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\integration\\test_p3d_hardening.py",
        "start": 134,
        "end": 143,
        "startLoc": {
          "line": 134,
          "column": 9,
          "position": 927
        },
        "endLoc": {
          "line": 143,
          "column": 15,
          "position": 1015
        }
      },
      "secondFile": {
        "name": "tests\\integration\\test_p3d_live_dashboard.py",
        "start": 69,
        "end": 72,
        "startLoc": {
          "line": 69,
          "column": 9,
          "position": 427
        },
        "endLoc": {
          "line": 72,
          "column": 4,
          "position": 444
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "import importlib.util\n\n        # Import live_feed module\n        live_feed_path = Path(__file__).parent.parent.parent / \"tools\" / \"live_feed.py\"\n        spec = importlib.util.spec_from_file_location(\"live_feed\", live_feed_path)\n        live_feed = importlib.util.module_from_spec(spec)\n        spec.loader.exec_module(live_feed)\n\n        # Create server components",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\integration\\test_p3d_hardening.py",
        "start": 176,
        "end": 184,
        "startLoc": {
          "line": 176,
          "column": 9,
          "position": 1237
        },
        "endLoc": {
          "line": 184,
          "column": 27,
          "position": 1314
        }
      },
      "secondFile": {
        "name": "tests\\integration\\test_p3d_live_dashboard.py",
        "start": 69,
        "end": 77,
        "startLoc": {
          "line": 69,
          "column": 9,
          "position": 427
        },
        "endLoc": {
          "line": 77,
          "column": 22,
          "position": 506
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "}):\n                    with patch(\"skalp_bot.runner.run_live_aurora.create_adapter\") as mock_adapter_factory:\n                        mock_adapter = MockAdapter(MockMarketData())\n                        mock_adapter_factory.return_value = mock_adapter\n                        \n                        with patch(\"yaml.safe_load\", return_value=self.test_config):\n                            with patch(\"pathlib.Path.exists\", return_value=True):\n                                with patch(\"pathlib.Path.read_text\", return_value=\"\"):\n                                    try",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\integration\\test_governance_gate.py",
        "start": 149,
        "end": 157,
        "startLoc": {
          "line": 149,
          "column": 17,
          "position": 1046
        },
        "endLoc": {
          "line": 157,
          "column": 4,
          "position": 1131
        }
      },
      "secondFile": {
        "name": "tests\\integration\\test_governance_gate.py",
        "start": 109,
        "end": 117,
        "startLoc": {
          "line": 109,
          "column": 9,
          "position": 736
        },
        "endLoc": {
          "line": 117,
          "column": 35,
          "position": 821
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "\"policy\": \"pocock\",\n                \"max_history_len\": 100\n            },\n            \"execution\": {\n                \"sla\": {\"max_latency_ms\": 250}\n            },\n            \"order_sink\": {\n                \"mode\": \"sim_local\",\n                \"sim_local\": {\n                    \"latency_ms\": 10,\n                    \"ttl_ms\": 5000\n                }\n            },\n            \"sizing\": {\n                \"kelly\": {\"risk_aversion\": 1.0},\n                \"limits\": {\"max_notional\": 1000.0}\n            }\n        }\n\n        # Mock SPRT that always rejects H0",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\integration\\test_governance_gate.py",
        "start": 176,
        "end": 195,
        "startLoc": {
          "line": 176,
          "column": 17,
          "position": 1271
        },
        "endLoc": {
          "line": 195,
          "column": 35,
          "position": 1384
        }
      },
      "secondFile": {
        "name": "tests\\integration\\test_governance_gate.py",
        "start": 72,
        "end": 91,
        "startLoc": {
          "line": 72,
          "column": 17,
          "position": 501
        },
        "endLoc": {
          "line": 91,
          "column": 4,
          "position": 614
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "events_logged = []\n\n            def mock_log_events(code: str, details: dict):\n                events_logged.append({\"code\": code, \"details\": details})\n\n            with patch(\"skalp_bot.runner.run_live_aurora._log_events\", side_effect=mock_log_events):\n                with patch.dict(os.environ, {\n                    \"DRY_RUN\": \"true\",\n                                                        \"AURORA_MAX_TICKS\": \"1\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\integration\\test_governance_gate.py",
        "start": 207,
        "end": 215,
        "startLoc": {
          "line": 207,
          "column": 13,
          "position": 1485
        },
        "endLoc": {
          "line": 215,
          "column": 4,
          "position": 1570
        }
      },
      "secondFile": {
        "name": "tests\\integration\\test_governance_gate.py",
        "start": 140,
        "end": 148,
        "startLoc": {
          "line": 140,
          "column": 13,
          "position": 956
        },
        "endLoc": {
          "line": 148,
          "column": 4,
          "position": 1043
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "):\n            events_logged = []\n            \n            def mock_log_events(code: str, details: dict):\n                events_logged.append({\"code\": code, \"details\": details})\n            \n            with patch(\"skalp_bot.runner.run_live_aurora._log_events\", side_effect=mock_log_events):\n                with patch.dict(os.environ, {\n                    \"DRY_RUN\": \"true\",\n                    \"AURORA_MAX_TICKS\": \"2\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\integration\\test_governance_gate.py",
        "start": 254,
        "end": 263,
        "startLoc": {
          "line": 254,
          "column": 12,
          "position": 1924
        },
        "endLoc": {
          "line": 263,
          "column": 4,
          "position": 2015
        }
      },
      "secondFile": {
        "name": "tests\\integration\\test_governance_gate.py",
        "start": 206,
        "end": 148,
        "startLoc": {
          "line": 206,
          "column": 10,
          "position": 1481
        },
        "endLoc": {
          "line": 148,
          "column": 4,
          "position": 1043
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "}):\n                    with patch(\"skalp_bot.runner.run_live_aurora.create_adapter\") as mock_adapter_factory:\n                        mock_adapter = MockAdapter(MockMarketData())\n                        mock_adapter_factory.return_value = mock_adapter\n                        \n                        with patch(\"yaml.safe_load\", return_value=self.test_config):\n                            with patch(\"pathlib.Path.exists\", return_value=True):\n                                with patch(\"pathlib.Path.read_text\", return_value=\"\"):\n                                    try:\n                                        from skalp_bot.runner.run_live_aurora import main\n                                        main(config_path=\"test_config.yaml\")\n                                    except SystemExit:\n                                        pass\n        \n        # Verify governance error events were logged",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\integration\\test_governance_gate.py",
        "start": 264,
        "end": 278,
        "startLoc": {
          "line": 264,
          "column": 17,
          "position": 2018
        },
        "endLoc": {
          "line": 278,
          "column": 45,
          "position": 2139
        }
      },
      "secondFile": {
        "name": "tests\\integration\\test_governance_gate.py",
        "start": 109,
        "end": 163,
        "startLoc": {
          "line": 109,
          "column": 9,
          "position": 736
        },
        "endLoc": {
          "line": 163,
          "column": 45,
          "position": 1167
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": "events_logged = []\n        \n        def mock_log_events(code: str, details: dict):\n            events_logged.append({\"code\": code, \"details\": details})\n        \n        with patch(\"skalp_bot.runner.run_live_aurora._log_events\", side_effect=mock_log_events):\n            with patch.dict(os.environ, {\n                \"DRY_RUN\": \"true\",\n                \"AURORA_MAX_TICKS\": \"2\"\n            }):\n                with patch(\"skalp_bot.runner.run_live_aurora.create_adapter\") as mock_adapter_factory:\n                    mock_adapter = MockAdapter(MockMarketData())\n                    mock_adapter_factory.return_value = mock_adapter\n                    \n                    with patch(\"yaml.safe_load\", return_value=self.test_config):\n                        with patch(\"pathlib.Path.exists\", return_value=True):\n                            with patch(\"pathlib.Path.read_text\", return_value=\"\"):\n                                try:\n                                    from skalp_bot.runner.run_live_aurora import main\n                                    main(config_path=\"test_config.yaml\")\n                                except SystemExit:\n                                    pass\n        \n        # Find governance events",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\integration\\test_governance_gate.py",
        "start": 318,
        "end": 341,
        "startLoc": {
          "line": 318,
          "column": 9,
          "position": 2488
        },
        "endLoc": {
          "line": 341,
          "column": 25,
          "position": 2699
        }
      },
      "secondFile": {
        "name": "tests\\integration\\test_governance_gate.py",
        "start": 140,
        "end": 163,
        "startLoc": {
          "line": 140,
          "column": 13,
          "position": 956
        },
        "endLoc": {
          "line": 163,
          "column": 45,
          "position": 1167
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "):\n                    with patch(\"pathlib.Path.exists\", return_value=True):\n                        with patch(\"pathlib.Path.read_text\", return_value=\"\"):\n                            try:\n                                from skalp_bot.runner.run_live_aurora import main\n                                main(config_path=\"test_config.yaml\")\n                            except SystemExit:\n                                pass  # Expected for test exit\n                            except Exception as e:\n                                pytest.fail(f\"Default config should work: {e}\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\integration\\test_governance_gate.py",
        "start": 376,
        "end": 385,
        "startLoc": {
          "line": 376,
          "column": 15,
          "position": 2975
        },
        "endLoc": {
          "line": 385,
          "column": 34,
          "position": 3058
        }
      },
      "secondFile": {
        "name": "tests\\integration\\test_governance_gate.py",
        "start": 304,
        "end": 313,
        "startLoc": {
          "line": 304,
          "column": 7,
          "position": 2386
        },
        "endLoc": {
          "line": 313,
          "column": 37,
          "position": 2469
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": "# CoxPH\r\n        cox = CoxPH()\r\n        cox._beta = {'obi': 0.1, 'spread_bps': -0.05}\r\n        cox._feat = ['obi', 'spread_bps']\r\n        \r\n        # SLA\r\n        sla = SLAGate(max_latency_ms=250, kappa_bps_per_ms=0.01, min_edge_after_bps=1.0)\r\n        \r\n        # Router\r\n        router = Router(\r\n            hazard_model=cox,\r\n            slagate=sla,\r\n            min_p_fill=0.25,\r\n            exchange_name='test'\r\n        )\r\n        \r\n        return router\r\n    \r\n    @pytest",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\integration\\test_full_b2b7_pipeline.py",
        "start": 46,
        "end": 64,
        "startLoc": {
          "line": 46,
          "column": 9,
          "position": 278
        },
        "endLoc": {
          "line": 64,
          "column": 8,
          "position": 414
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_xai_decision_trail.py",
        "start": 29,
        "end": 47,
        "startLoc": {
          "line": 29,
          "column": 9,
          "position": 153
        },
        "endLoc": {
          "line": 47,
          "column": 4,
          "position": 289
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "mock_requests = MagicMock()\r\n        mock_response = MagicMock()\r\n        mock_response.ok = True\r\n        mock_response.json.return_value = {\r\n            \"allow\": True,\r\n            \"max_qty\": 0.001,\r\n            \"reason\": \"Test allow\",\r\n            \"observability\": {\"gate_state\": \"ALLOW\"}\r\n        }\r\n        mock_requests.post.return_value = mock_response\r\n        aurora_gate._requests = mock_requests\r\n        \r\n        # Simulate complete trading cycle",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\integration\\test_full_b2b7_pipeline.py",
        "start": 291,
        "end": 303,
        "startLoc": {
          "line": 291,
          "column": 9,
          "position": 2199
        },
        "endLoc": {
          "line": 303,
          "column": 34,
          "position": 2305
        }
      },
      "secondFile": {
        "name": "tests\\integration\\test_full_b2b7_pipeline.py",
        "start": 262,
        "end": 274,
        "startLoc": {
          "line": 262,
          "column": 9,
          "position": 1915
        },
        "endLoc": {
          "line": 274,
          "column": 22,
          "position": 2021
        }
      }
    },
    {
      "format": "python",
      "lines": 47,
      "fragment": "class MockExchange:\n    \"\"\"Mock exchange implementation with configurable behavior.\"\"\"\n\n    def __init__(self, config: Dict[str, Any]):\n        self.config = config\n        self.orders = {}  # order_id -> order\n        self.fills = {}   # order_id -> list of fills\n        self.reject_next = None\n        self.price_sequence = config.get(\"price_sequence\", [])\n        self.price_index = 0\n\n    def set_fill_profile(self, profile: Dict[str, Any]):\n        \"\"\"Update fill profile dynamically.\"\"\"\n        self.config.update(profile)\n\n    def set_reject_next_order(self, reason: str):\n        \"\"\"Set next order to be rejected.\"\"\"\n        self.reject_next = reason\n\n    def reset_reject_pattern(self):\n        \"\"\"Reset rejection pattern.\"\"\"\n        self.reject_next = None\n\n    def trigger_partial_fill(self, order_id: str, quantity: Decimal, price: Decimal):\n        \"\"\"Manually trigger a partial fill for testing.\"\"\"\n        if order_id not in self.fills:\n            self.fills[order_id] = []\n\n        fill = Fill(\n            price=float(price),\n            qty=float(quantity),\n            fee=float(quantity * price * Decimal(\"0.001\")),  # 0.1% fee\n            fee_asset=\"USDT\",\n            ts_ns=int(time.time() * 1_000_000_000)\n        )\n\n        self.fills[order_id].append(fill)\n\n    async def submit_order(self, order: OrderRequest) -> Dict[str, Any]:\n        \"\"\"Submit order with configurable behavior.\"\"\"\n        # Check for rejection\n        if self.reject_next:\n            reason = self.reject_next\n            self.reject_next = None\n            return {\n                \"status\": \"rejected\",\n                \"order_id\": f\"mock_{order.client_order_id}\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\fixtures\\mock_exchange_factory.py",
        "start": 329,
        "end": 375,
        "startLoc": {
          "line": 329,
          "column": 1,
          "position": 2648
        },
        "endLoc": {
          "line": 375,
          "column": 31,
          "position": 3056
        }
      },
      "secondFile": {
        "name": "tests\\fixtures\\mock_exchange_factory.py",
        "start": 34,
        "end": 80,
        "startLoc": {
          "line": 34,
          "column": 1,
          "position": 158
        },
        "endLoc": {
          "line": 80,
          "column": 44,
          "position": 566
        }
      }
    },
    {
      "format": "python",
      "lines": 45,
      "fragment": "self.orders[order_id] = order\n\n        # Simulate exchange processing delay\n        latency = self.config.get(\"latency_ms\", 10) / 1000\n        await asyncio.sleep(latency)\n\n        # Determine fill behavior\n        if self.config.get(\"immediate\", True):\n            await self._process_fills(order_id, order)\n        else:\n            # Schedule fills asynchronously\n            asyncio.create_task(self._delayed_fill(order_id, order))\n\n        return {\n            \"status\": \"accepted\",\n            \"order_id\": order_id,\n            \"timestamp\": time.time()\n        }\n\n    async def cancel_order(self, order_id: str) -> Dict[str, Any]:\n        \"\"\"Cancel order.\"\"\"\n        if order_id not in self.orders:\n            return {\"status\": \"not_found\", \"order_id\": order_id}\n\n        # Simulate cancellation delay\n        latency = self.config.get(\"latency_ms\", 10) / 1000\n        await asyncio.sleep(latency)\n\n        # Remove from active orders\n        del self.orders[order_id]\n\n        return {\n            \"status\": \"cancelled\",\n            \"order_id\": order_id,\n            \"timestamp\": time.time()\n        }\n\n    async def get_order_status(self, order_id: str) -> Dict[str, Any]:\n        \"\"\"Get order status.\"\"\"\n        if order_id not in self.orders:\n            return {\"status\": \"not_found\", \"order_id\": order_id}\n\n        order = self.orders[order_id]\n        fills = self.fills.get(order_id, [])\n        filled_qty = sum(f.quantity",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\fixtures\\mock_exchange_factory.py",
        "start": 382,
        "end": 426,
        "startLoc": {
          "line": 382,
          "column": 9,
          "position": 3092
        },
        "endLoc": {
          "line": 426,
          "column": 9,
          "position": 3473
        }
      },
      "secondFile": {
        "name": "tests\\fixtures\\mock_exchange_factory.py",
        "start": 87,
        "end": 131,
        "startLoc": {
          "line": 87,
          "column": 9,
          "position": 602
        },
        "endLoc": {
          "line": 131,
          "column": 4,
          "position": 983
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "for f in fills)\n\n        if filled_qty == 0:\n            status = \"open\"\n        elif filled_qty < order.quantity:\n            status = \"partial_fill\"\n        else:\n            status = \"filled\"\n\n        return {\n            \"order_id\": order_id,\n            \"status\": status,\n            \"filled_quantity\": filled_qty,\n            \"remaining_quantity\": order.quantity - filled_qty,\n            \"fills\": [f.dict",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\fixtures\\mock_exchange_factory.py",
        "start": 426,
        "end": 440,
        "startLoc": {
          "line": 426,
          "column": 2,
          "position": 3475
        },
        "endLoc": {
          "line": 440,
          "column": 5,
          "position": 3579
        }
      },
      "secondFile": {
        "name": "tests\\fixtures\\mock_exchange_factory.py",
        "start": 131,
        "end": 145,
        "startLoc": {
          "line": 131,
          "column": 2,
          "position": 985
        },
        "endLoc": {
          "line": 145,
          "column": 9,
          "position": 1089
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "for f in fills]\n        }\n\n    async def get_order_fills(self, order_id: str) -> List[Fill]:\n        \"\"\"Get fills for order.\"\"\"\n        return self.fills.get(order_id, [])\n\n    async def _process_fills(self, order_id: str, order: OrderRequest):\n        \"\"\"Process fills based on configuration.\"\"\"\n        partial_ratios = self.config.get(\"partial\", [1.0])  # Default full fill\n\n        if order_id not in self.fills:\n            self.fills[order_id] = []\n\n        remaining_qty = order.quantity\n\n        for ratio in partial_ratios:\n            if remaining_qty <= 0:\n                break\n\n            fill_qty = remaining_qty * Decimal",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\fixtures\\mock_exchange_factory.py",
        "start": 440,
        "end": 460,
        "startLoc": {
          "line": 440,
          "column": 2,
          "position": 3583
        },
        "endLoc": {
          "line": 460,
          "column": 8,
          "position": 3760
        }
      },
      "secondFile": {
        "name": "tests\\fixtures\\mock_exchange_factory.py",
        "start": 145,
        "end": 165,
        "startLoc": {
          "line": 145,
          "column": 2,
          "position": 1091
        },
        "endLoc": {
          "line": 165,
          "column": 6,
          "position": 1268
        }
      }
    },
    {
      "format": "python",
      "lines": 92,
      "fragment": ",  # 0.1% fee\n                fee_asset=\"USDT\",\n                ts_ns=int(time.time() * 1_000_000_000)\n            )\n\n            self.fills[order_id].append(fill)\n            remaining_qty -= fill_qty\n\n            # Simulate fill delay between partials\n            if len(partial_ratios) > 1:\n                await asyncio.sleep(0.05)\n\n    async def _delayed_fill(self, order_id: str, order: OrderRequest):\n        \"\"\"Process delayed fills.\"\"\"\n        # Wait for configured delay\n        delay = self.config.get(\"delay_ms\", 100) / 1000\n        await asyncio.sleep(delay)\n\n        # Process fills if order still active\n        if order_id in self.orders:\n            await self._process_fills(order_id, order)\n\n\nclass MockExchangeFactory:\n    \"\"\"Factory for creating mock exchanges with different configurations.\"\"\"\n\n    @staticmethod\n    def create_deterministic_exchange(fill_profile: Optional[Dict[str, Any]] = None) -> MockExchange:\n        \"\"\"Create deterministic exchange for predictable testing.\"\"\"\n        config = {\n            \"immediate\": True,\n            \"latency_ms\": 10,\n            \"partial\": [1.0],  # Full fill by default\n            \"price_sequence\": [],\n            **(fill_profile or {})\n        }\n        return MockExchange(config)\n\n    @staticmethod\n    def create_stochastic_exchange(fill_profile: Optional[Dict[str, Any]] = None) -> MockExchange:\n        \"\"\"Create stochastic exchange with random behavior.\"\"\"\n        config = {\n            \"immediate\": True,\n            \"latency_ms\": random.randint(5, 50),\n            \"partial\": MockExchangeFactory._generate_random_partial_ratios(),\n            \"price_variation\": 0.02,  # 2% price variation\n            **(fill_profile or {})\n        }\n        return MockExchange(config)\n\n    @staticmethod\n    def create_slow_exchange(fill_profile: Optional[Dict[str, Any]] = None) -> MockExchange:\n        \"\"\"Create slow exchange for testing timeouts.\"\"\"\n        config = {\n            \"immediate\": False,\n            \"latency_ms\": 200,\n            \"delay_ms\": 500,\n            \"partial\": [1.0],\n            **(fill_profile or {})\n        }\n        return MockExchange(config)\n\n    @staticmethod\n    def create_partial_fill_exchange(fill_profile: Optional[Dict[str, Any]] = None) -> MockExchange:\n        \"\"\"Create exchange that does partial fills.\"\"\"\n        config = {\n            \"immediate\": True,\n            \"latency_ms\": 20,\n            \"partial\": [0.3, 0.4, 0.3],  # Multiple partial fills\n            **(fill_profile or {})\n        }\n        return MockExchange(config)\n\n    @staticmethod\n    def create_rejecting_exchange(reject_rate: float = 0.1, fill_profile: Optional[Dict[str, Any]] = None) -> MockExchange:\n        \"\"\"Create exchange that randomly rejects orders.\"\"\"\n        config = {\n            \"immediate\": True,\n            \"latency_ms\": 15,\n            \"reject_rate\": reject_rate,\n            \"partial\": [1.0],\n            **(fill_profile or {})\n        }\n        exchange = MockExchange(config)\n\n        # Override submit_order to add rejection logic\n        original_submit = exchange.submit_order\n        async def rejecting_submit(order: OrderRequest) -> Dict[str, Any]:\n            if random.random() < reject_rate:\n                return {\n                    \"status\": \"rejected\",\n                    \"order_id\": f\"mock_{order.client_order_id}\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\fixtures\\mock_exchange_factory.py",
        "start": 477,
        "end": 568,
        "startLoc": {
          "line": 477,
          "column": 2,
          "position": 3942
        },
        "endLoc": {
          "line": 568,
          "column": 31,
          "position": 4701
        }
      },
      "secondFile": {
        "name": "tests\\fixtures\\mock_exchange_factory.py",
        "start": 183,
        "end": 274,
        "startLoc": {
          "line": 183,
          "column": 6,
          "position": 1417
        },
        "endLoc": {
          "line": 274,
          "column": 44,
          "position": 2176
        }
      }
    },
    {
      "format": "python",
      "lines": 49,
      "fragment": ",\n                    \"reason\": \"RANDOM_REJECT\",\n                    \"timestamp\": time.time()\n                }\n            return await original_submit(order)\n\n        exchange.submit_order = rejecting_submit\n        return exchange\n\n    @staticmethod\n    def create_high_latency_exchange(fill_profile: Optional[Dict[str, Any]] = None) -> MockExchange:\n        \"\"\"Create exchange with high latency for performance testing.\"\"\"\n        config = {\n            \"immediate\": True,\n            \"latency_ms\": 500,  # 500ms latency\n            \"jitter_ms\": 100,   # ±100ms jitter\n            \"partial\": [1.0],\n            **(fill_profile or {})\n        }\n        exchange = MockExchange(config)\n\n        # Override to add jitter\n        original_submit = exchange.submit_order\n        async def jittery_submit(order: OrderRequest) -> Dict[str, Any]:\n            result = await original_submit(order)\n            # Add random jitter\n            jitter = random.uniform(-config[\"jitter_ms\"], config[\"jitter_ms\"]) / 1000\n            await asyncio.sleep(max(0, jitter))\n            return result\n\n        exchange.submit_order = jittery_submit\n        return exchange\n\n    @staticmethod\n    def _generate_random_partial_ratios() -> List[float]:\n        \"\"\"Generate random partial fill ratios that sum to 1.0.\"\"\"\n        num_fills = random.randint(1, 4)\n        ratios = [random.random() for _ in range(num_fills)]\n        total = sum(ratios)\n        return [r / total for r in ratios]\n\n    @staticmethod\n    def create_exchange_with_price_sequence(price_sequence: List[float],\n                                          fill_profile: Optional[Dict[str, Any]] = None) -> MockExchange:\n        \"\"\"Create exchange with specific price sequence for testing.\"\"\"\n        config = {\n            \"immediate\": True,\n            \"latency_ms\": 10,\n            \"partial\": [1.0",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\fixtures\\mock_exchange_factory.py",
        "start": 568,
        "end": 616,
        "startLoc": {
          "line": 568,
          "column": 31,
          "position": 4702
        },
        "endLoc": {
          "line": 616,
          "column": 4,
          "position": 5133
        }
      },
      "secondFile": {
        "name": "tests\\fixtures\\mock_exchange_factory.py",
        "start": 274,
        "end": 322,
        "startLoc": {
          "line": 274,
          "column": 44,
          "position": 2177
        },
        "endLoc": {
          "line": 322,
          "column": 4,
          "position": 2608
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ",'ece_bad':0.08},\n                'reg':{'trend':1.0,'grind':0.8,'chaos':0.6},\n                'liq':{'spread_bps_breaks':[5,10],'lambdas':[1.0,0.8,0.6]},\n                'dd': {'dd_warn':0.05,'dd_bad':0.10,'lambdas':[1.0,0.7,0.4]},\n                'lat':{'p95_ms_breaks':[200,500],'lambdas':[1.0,0.8,0.6]},\n            }\n        },",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\execution\\test_sizing_orchestrator_effect.py",
        "start": 26,
        "end": 32,
        "startLoc": {
          "line": 26,
          "column": 5,
          "position": 221
        },
        "endLoc": {
          "line": 32,
          "column": 2,
          "position": 324
        }
      },
      "secondFile": {
        "name": "tests\\risk\\test_lambda_orchestrator.py",
        "start": 5,
        "end": 10,
        "startLoc": {
          "line": 5,
          "column": 5,
          "position": 38
        },
        "endLoc": {
          "line": 10,
          "column": 2,
          "position": 139
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "def mk_market():\n    return MarketSpec(\n        tick_size=Decimal('0.01'), lot_size=Decimal('0.1'), min_notional=Decimal('10'),\n        maker_fee_bps=1, taker_fee_bps=5, best_bid=Decimal('100'), best_ask=Decimal('100.1'),\n        spread_bps=1.0, mid=Decimal('100.05')\n    )\n\n\ndef mk_intent(stop_bps=100, qty_hint=None, equity=Decimal('10000')):\n    return OrderIntent(\n        intent_id='t1'",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\execution\\test_sizing_orchestrator_effect.py",
        "start": 37,
        "end": 47,
        "startLoc": {
          "line": 37,
          "column": 1,
          "position": 344
        },
        "endLoc": {
          "line": 47,
          "column": 5,
          "position": 459
        }
      },
      "secondFile": {
        "name": "tests\\obs\\test_metrics_exposition.py",
        "start": 9,
        "end": 19,
        "startLoc": {
          "line": 9,
          "column": 1,
          "position": 66
        },
        "endLoc": {
          "line": 19,
          "column": 5,
          "position": 181
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ", expected_return_bps=40, post_only=True)\n    mspec = market_spec_factory(tick_size='0.10', best_bid='30000', best_ask='30000.6')\n    monkeypatch.setattr(RouterV2, '_p_fill', lambda self, f, s: Decimal('0.8'))\n    res = svc.place(intent=intent, market=mspec, features={}, measured_latency_ms=20)\n    if not isinstance(res, DenyDecision) and res.mode == 'maker' and res.price:\n        assert Decimal(str(res.price)) >=",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\execution\\test_post_only_sim.py",
        "start": 16,
        "end": 21,
        "startLoc": {
          "line": 16,
          "column": 7,
          "position": 230
        },
        "endLoc": {
          "line": 21,
          "column": 3,
          "position": 365
        }
      },
      "secondFile": {
        "name": "tests\\execution\\test_post_only_sim.py",
        "start": 7,
        "end": 12,
        "startLoc": {
          "line": 7,
          "column": 6,
          "position": 56
        },
        "endLoc": {
          "line": 12,
          "column": 3,
          "position": 191
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "]},\n            }\n        },\n        'execution':{'sla':{'p95_ms':200}}\n    }\n\n\ndef mk_market():\n    return MarketSpec(\n        tick_size=Decimal('0.01'), lot_size=Decimal('0.1'), min_notional=Decimal('10'),\n        maker_fee_bps=1, taker_fee_bps=5, best_bid=Decimal('100'), best_ask=Decimal('100.1'),\n        spread_bps=1.0, mid=Decimal('100.05')\n    )\n\n\ndef mk_intent(equity",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\execution\\test_portfolio_correlation_effect.py",
        "start": 33,
        "end": 48,
        "startLoc": {
          "line": 33,
          "column": 4,
          "position": 334
        },
        "endLoc": {
          "line": 48,
          "column": 7,
          "position": 450
        }
      },
      "secondFile": {
        "name": "tests\\execution\\test_sizing_orchestrator_effect.py",
        "start": 30,
        "end": 17,
        "startLoc": {
          "line": 30,
          "column": 4,
          "position": 315
        },
        "endLoc": {
          "line": 17,
          "column": 9,
          "position": 153
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n    spread_bps=float((best_ask-best_bid)/((best_ask+best_bid)/2)*10000)\n    return MarketSpec(tick_size=Decimal('0.01'), lot_size=Decimal('0.001'), min_notional=Decimal('5'),\n                      maker_fee_bps=0, taker_fee_bps=5, best_bid=best_bid, best_ask=best_ask, spread_bps=spread_bps, mid=mid)\n\ndef _router",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\execution\\test_low_pfill_deny.py",
        "start": 14,
        "end": 19,
        "startLoc": {
          "line": 14,
          "column": 9,
          "position": 180
        },
        "endLoc": {
          "line": 19,
          "column": 8,
          "position": 269
        }
      },
      "secondFile": {
        "name": "tests\\execution\\test_post_only_unavailable.py",
        "start": 18,
        "end": 24,
        "startLoc": {
          "line": 18,
          "column": 8,
          "position": 256
        },
        "endLoc": {
          "line": 24,
          "column": 31,
          "position": 343
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "def mk_market():\n    return MarketSpec(\n        tick_size=Decimal('0.01'), lot_size=Decimal('0.1'), min_notional=Decimal('10'),\n        maker_fee_bps=1, taker_fee_bps=5, best_bid=Decimal('100'), best_ask=Decimal('100.1'),\n        spread_bps=1.0, mid=Decimal('100.05')\n    )\n\n\ndef test_cvar_gate_zeroes_qty_and_emits_shift",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\execution\\test_cvar_gate_evt.py",
        "start": 6,
        "end": 14,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 37
        },
        "endLoc": {
          "line": 14,
          "column": 42,
          "position": 122
        }
      },
      "secondFile": {
        "name": "tests\\obs\\test_metrics_exposition.py",
        "start": 9,
        "end": 17,
        "startLoc": {
          "line": 9,
          "column": 1,
          "position": 66
        },
        "endLoc": {
          "line": 17,
          "column": 10,
          "position": 151
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "from decimal import Decimal\nfrom core.risk.sizing_orchestrator import SizingOrchestrator\nfrom core.execution.router_v2 import MarketSpec, OrderIntent\nfrom core.aurora_event_logger import AuroraEventLogger\n\n\ndef _market():\n    return MarketSpec(tick_size=Decimal('0.01'), lot_size=Decimal('0.001'), min_notional=Decimal('5'),\n                      maker_fee_bps=0, taker_fee_bps=5, best_bid=Decimal('99.99'), best_ask=Decimal('100.01'), spread_bps=2.0, mid=Decimal('100'))\n\n\ndef _intent(equity_usd:str,",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\execution\\test_cvar_feedback_stub.py",
        "start": 1,
        "end": 12,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 12,
          "column": 2,
          "position": 132
        }
      },
      "secondFile": {
        "name": "tests\\execution\\test_sizing_kelly_min_notional.py",
        "start": 1,
        "end": 12,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 12,
          "column": 2,
          "position": 132
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "import pytest\nimport asyncio\nimport time\nfrom decimal import Decimal\nfrom unittest.mock import Mock, AsyncMock, patch\nfrom typing import Dict, Any, List\n\nfrom tests.fixtures.mock_exchange_factory import MockExchangeFactory\nfrom core.execution.exchange.common import OrderRequest, Fill, Side, OrderType\nfrom",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\e2e\\test_trade_flow_simulator.py",
        "start": 13,
        "end": 22,
        "startLoc": {
          "line": 13,
          "column": 1,
          "position": 3
        },
        "endLoc": {
          "line": 22,
          "column": 5,
          "position": 89
        }
      },
      "secondFile": {
        "name": "tests\\integration\\oms\\test_order_lifecycle.py",
        "start": 9,
        "end": 17,
        "startLoc": {
          "line": 9,
          "column": 1,
          "position": 3
        },
        "endLoc": {
          "line": 17,
          "column": 2,
          "position": 88
        }
      }
    },
    {
      "format": "python",
      "lines": 38,
      "fragment": "def make_client(tmp_path) -> TestClient:\n    \"\"\"Create test client with isolated environment\"\"\"\n    os.environ['AURORA_API_TOKEN'] = 'test_token_12345678901234567890'\n    os.environ['AURORA_IP_ALLOWLIST'] = '127.0.0.1'\n    os.chdir(tmp_path)\n\n    import api.service as svc\n    importlib.reload(svc)\n    return TestClient(svc.app)\n\n\ndef setup_app_state(client):\n    \"\"\"Setup minimal app state for testing\"\"\"\n    app = client.app\n\n    # Initialize basic state attributes\n    if not hasattr(app.state, 'cfg'):\n        app.state.cfg = {'test': 'config'}\n    if not hasattr(app.state, 'trading_system'):\n        app.state.trading_system = None\n    if not hasattr(app.state, 'governance'):\n        from aurora.governance import Governance\n        app.state.governance = Governance()\n    if not hasattr(app.state, 'events_emitter'):\n        app.state.events_emitter = MagicMock()\n    if not hasattr(app.state, 'last_event_ts'):\n        app.state.last_event_ts = None\n    if not hasattr(app.state, 'session_dir'):\n        from pathlib import Path\n        app.state.session_dir = Path('logs')\n\n    return app\n\n\nclass TestBasicEndpoints:\n    \"\"\"Test basic API endpoints that don't require complex setup\"\"\"\n\n    def test_root_endpoint_redirects_to_docs",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\api\\test_basic_endpoints.py",
        "start": 8,
        "end": 45,
        "startLoc": {
          "line": 8,
          "column": 1,
          "position": 37
        },
        "endLoc": {
          "line": 45,
          "column": 37,
          "position": 355
        }
      },
      "secondFile": {
        "name": "tests\\api\\test_basic_endpoints_new.py",
        "start": 9,
        "end": 46,
        "startLoc": {
          "line": 9,
          "column": 1,
          "position": 44
        },
        "endLoc": {
          "line": 46,
          "column": 40,
          "position": 362
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": ")\n        response = client.get('/version')\n        assert response.status_code == 200\n        data = response.json()\n        assert 'version' in data\n        assert isinstance(data['version'], str)\n\n    def test_health_endpoint_with_models_loaded(self, tmp_path):\n        \"\"\"Test health endpoint when models are loaded\"\"\"\n        client = make_client(tmp_path)\n        setup_app_state(client)\n\n        # Mock trading system as loaded\n        with patch.object(client.app.state, 'trading_system') as mock_ts:\n            mock_ts.student = MagicMock()\n            mock_ts.router = MagicMock()\n\n            response = client.get('/health')\n            assert response.status_code == 200\n            data = response.json()\n            assert data['status'] == 'healthy'\n            assert data['models_loaded'] is True\n\n    def",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\api\\test_basic_endpoints.py",
        "start": 57,
        "end": 80,
        "startLoc": {
          "line": 57,
          "column": 7,
          "position": 442
        },
        "endLoc": {
          "line": 80,
          "column": 4,
          "position": 642
        }
      },
      "secondFile": {
        "name": "tests\\api\\test_basic_endpoints_new.py",
        "start": 56,
        "end": 78,
        "startLoc": {
          "line": 56,
          "column": 9,
          "position": 457
        },
        "endLoc": {
          "line": 78,
          "column": 7,
          "position": 656
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "def test_health_endpoint_with_models_not_loaded(self, tmp_path):\n        \"\"\"Test health endpoint when models are not loaded\"\"\"\n        client = make_client(tmp_path)\n        setup_app_state(client)\n\n        # Mock trading system as not loaded\n        with patch.object(client.app.state, 'trading_system', None):\n            response = client.get('/health')\n            assert response.status_code == 200\n            data = response.json()\n            assert data['status'] == 'starting'  # Status is 'starting' when models not loaded",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\api\\test_basic_endpoints.py",
        "start": 80,
        "end": 90,
        "startLoc": {
          "line": 80,
          "column": 5,
          "position": 642
        },
        "endLoc": {
          "line": 90,
          "column": 46,
          "position": 743
        }
      },
      "secondFile": {
        "name": "tests\\api\\test_basic_endpoints_new.py",
        "start": 80,
        "end": 91,
        "startLoc": {
          "line": 80,
          "column": 5,
          "position": 666
        },
        "endLoc": {
          "line": 91,
          "column": 7,
          "position": 768
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n            except Exception as e:\n                error_msg = str(e)\n                why_code = \"WHY_EX_REJECT\"\n                if \"rate limit\" in error_msg.lower():\n                    why_code = \"WHY_RATE_LIMIT\"\n                elif \"timeout\" in error_msg.lower() or \"connection\" in error_msg.lower():\n                    why_code = \"WHY_CONN_ERR\"\n                \n                _log_events(\"ORDER.REJECT\", {\n                    \"details\": {\n                        \"close\"",
      "tokens": 0,
      "firstFile": {
        "name": "skalp_bot\\runner\\run_live_aurora.py",
        "start": 553,
        "end": 564,
        "startLoc": {
          "line": 553,
          "column": 2,
          "position": 5333
        },
        "endLoc": {
          "line": 564,
          "column": 8,
          "position": 5433
        }
      },
      "secondFile": {
        "name": "skalp_bot\\runner\\run_live_aurora.py",
        "start": 505,
        "end": 516,
        "startLoc": {
          "line": 505,
          "column": 10,
          "position": 4866
        },
        "endLoc": {
          "line": 516,
          "column": 13,
          "position": 4966
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "def _quantile(xs: List[float], q: float) -> float:\r\n    if not xs:\r\n        return 0.0\r\n    q = 0.0 if q < 0.0 else 1.0 if q > 1.0 else q\r\n    xs2 = sorted(xs)\r\n    pos = q * (len(xs2) - 1)\r\n    lo = int(pos)\r\n    hi = min(lo + 1, len(xs2) - 1)\r\n    frac = pos - lo\r\n    return xs2[lo] * (1 - frac) + xs2[hi] * frac\r\n\r\n\r\nclass",
      "tokens": 0,
      "firstFile": {
        "name": "core\\universe\\ranking.py",
        "start": 63,
        "end": 75,
        "startLoc": {
          "line": 63,
          "column": 1,
          "position": 284
        },
        "endLoc": {
          "line": 75,
          "column": 6,
          "position": 471
        }
      },
      "secondFile": {
        "name": "core\\xai\\alerts.py",
        "start": 65,
        "end": 77,
        "startLoc": {
          "line": 65,
          "column": 1,
          "position": 466
        },
        "endLoc": {
          "line": 77,
          "column": 49,
          "position": 641
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": ",\n            time_to_first_fill_ms=0.0,\n            total_execution_time_ms=0.0,\n            fill_ratio=0.0,\n            maker_fill_ratio=0.0,\n            taker_fill_ratio=0.0,\n            avg_queue_position=None,\n            raw_edge_bps=0.0,\n            fees_bps=0.0,\n            slippage_in_bps=0.0,\n            slippage_out_bps=0.0,\n            adverse_bps=0.0,\n            latency_bps=0.0,\n            impact_bps=0.0,\n            rebate_bps=0.0,\n            implementation_shortfall_bps=0.0,\n            realized_spread_bps=0.0,\n            effective_spread_bps=0.0,\n            analysis_ts_ns=int(time.time_ns()),",
      "tokens": 0,
      "firstFile": {
        "name": "core\\tca\\tca_analyzer.py",
        "start": 427,
        "end": 445,
        "startLoc": {
          "line": 427,
          "column": 4,
          "position": 3697
        },
        "endLoc": {
          "line": 445,
          "column": 2,
          "position": 3812
        }
      },
      "secondFile": {
        "name": "core\\tca\\tca_analyzer.py",
        "start": 140,
        "end": 159,
        "startLoc": {
          "line": 140,
          "column": 11,
          "position": 1148
        },
        "endLoc": {
          "line": 159,
          "column": 2,
          "position": 1265
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "from __future__ import annotations\r\n\r\nfrom dataclasses import dataclass\r\nfrom typing import Deque, Dict, Iterable, List, Optional, Sequence, Tuple\r\nimport bisect\r\nimport math\r\nimport random\r\nfrom collections import deque\r\n\r\ntry:\r\n    import numpy as np  # type: ignore\r\nexcept Exception:  # pragma: no cover\r\n    np = None  # type: ignore\r\n\r\n# =============================\r\n# Empirical VaR / CVaR",
      "tokens": 0,
      "firstFile": {
        "name": "core\\risk\\cvar.py",
        "start": 18,
        "end": 33,
        "startLoc": {
          "line": 18,
          "column": 1,
          "position": 3
        },
        "endLoc": {
          "line": 33,
          "column": 23,
          "position": 115
        }
      },
      "secondFile": {
        "name": "core\\risk\\evt_pot.py",
        "start": 25,
        "end": 40,
        "startLoc": {
          "line": 25,
          "column": 1,
          "position": 3
        },
        "endLoc": {
          "line": 40,
          "column": 12,
          "position": 115
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "def _quantile(xs: List[float], q: float) -> float:\r\n    if not xs:\r\n        return 0.0\r\n    q = 0.0 if q < 0.0 else 1.0 if q > 1.0 else q\r\n    xs2 = sorted(xs)\r\n    pos = q * (len(xs2) - 1)\r\n    lo = int(pos)\r\n    hi = min(lo + 1, len(xs2) - 1)\r\n    frac = pos - lo\r\n    return xs2[lo] * (1 - frac) + xs2[hi] * frac\r\n\r\n\r\n@dataclass",
      "tokens": 0,
      "firstFile": {
        "name": "core\\regime\\manager.py",
        "start": 40,
        "end": 52,
        "startLoc": {
          "line": 40,
          "column": 1,
          "position": 74
        },
        "endLoc": {
          "line": 52,
          "column": 11,
          "position": 261
        }
      },
      "secondFile": {
        "name": "core\\xai\\alerts.py",
        "start": 65,
        "end": 77,
        "startLoc": {
          "line": 65,
          "column": 1,
          "position": 466
        },
        "endLoc": {
          "line": 77,
          "column": 49,
          "position": 641
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "ssl_context = ssl.create_default_context()\n        \n        try:\n            async with websockets.connect(url, ssl=ssl_context) as websocket:\n                self._log_event(\"WS.CONNECT\", {\"url\": url, \"symbol\": symbol}, symbol.upper())\n                \n                while self._running:\n                    try:\n                        message = await asyncio.wait_for(websocket.recv(), timeout=30)\n                        data = json.loads(message)\n                        \n                        # Binance sends event type in 'e' field",
      "tokens": 0,
      "firstFile": {
        "name": "core\\market\\websocket_client.py",
        "start": 145,
        "end": 156,
        "startLoc": {
          "line": 145,
          "column": 9,
          "position": 1022
        },
        "endLoc": {
          "line": 156,
          "column": 40,
          "position": 1141
        }
      },
      "secondFile": {
        "name": "core\\market\\websocket_client.py",
        "start": 107,
        "end": 118,
        "startLoc": {
          "line": 107,
          "column": 9,
          "position": 649
        },
        "endLoc": {
          "line": 118,
          "column": 54,
          "position": 768
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "def now_ns(self) -> int:\r\n        return time.perf_counter_ns()\r\n\r\n    def sleep_until_wall_ns(self, target_wall_ns: int) -> None:\r\n        remaining = target_wall_ns - self.now_ns()\r\n        if remaining > 0:\r\n            # Apply max_sleep_ns clamp if configured\r\n            if self.max_sleep_ns is not None and remaining > self.max_sleep_ns:\r\n                actual_target = self.now_ns() + self.max_sleep_ns\r\n                time.sleep(_ns_to_seconds(self.max_sleep_ns))\r\n            else:\r\n                time.sleep(_ns_to_seconds(remaining))\r\n\r\n    def",
      "tokens": 0,
      "firstFile": {
        "name": "core\\ingestion\\sync_clock.py",
        "start": 136,
        "end": 149,
        "startLoc": {
          "line": 136,
          "column": 5,
          "position": 711
        },
        "endLoc": {
          "line": 149,
          "column": 4,
          "position": 866
        }
      },
      "secondFile": {
        "name": "core\\ingestion\\sync_clock.py",
        "start": 86,
        "end": 99,
        "startLoc": {
          "line": 86,
          "column": 5,
          "position": 325
        },
        "endLoc": {
          "line": 99,
          "column": 71,
          "position": 480
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "(alpha: float = 0.05, mu0: float = 0.0, mu1: float = 0.1, beta: float = 0.2, min_samples: int = 5, max_samples: Optional[int] = None) -> \"CompositeSPRT\":\n    cfg = SPRTConfig(mu0=mu0, mu1=mu1, alpha=alpha, beta=beta, min_samples=min_samples, max_samples=max_samples)\n    return CompositeSPRT(cfg)\n\n\ndef create_sprt_bh_fdr",
      "tokens": 0,
      "firstFile": {
        "name": "core\\governance\\sprt_glr.py",
        "start": 262,
        "end": 267,
        "startLoc": {
          "line": 262,
          "column": 16,
          "position": 2346
        },
        "endLoc": {
          "line": 267,
          "column": 19,
          "position": 2465
        }
      },
      "secondFile": {
        "name": "core\\governance\\sprt_glr.py",
        "start": 257,
        "end": 262,
        "startLoc": {
          "line": 257,
          "column": 19,
          "position": 2226
        },
        "endLoc": {
          "line": 262,
          "column": 16,
          "position": 2345
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "(alpha: float = 0.05, mu0: float = 0.0, mu1: float = 0.1, beta: float = 0.2, min_samples: int = 5, max_samples: Optional[int] = None) -> \"CompositeSPRT\":\n    cfg = SPRTConfig(mu0=mu0, mu1=mu1, alpha=alpha, beta=beta, min_samples=min_samples, max_samples=max_samples)\n    return CompositeSPRT(cfg)\n\n\n__all__",
      "tokens": 0,
      "firstFile": {
        "name": "core\\governance\\sprt_glr.py",
        "start": 267,
        "end": 272,
        "startLoc": {
          "line": 267,
          "column": 19,
          "position": 2466
        },
        "endLoc": {
          "line": 272,
          "column": 8,
          "position": 2583
        }
      },
      "secondFile": {
        "name": "core\\governance\\sprt_glr.py",
        "start": 257,
        "end": 262,
        "startLoc": {
          "line": 257,
          "column": 19,
          "position": 2226
        },
        "endLoc": {
          "line": 262,
          "column": 4,
          "position": 2343
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "AlphaTxn(\n                ts_ns_mono=txn.ts_ns_mono,\n                ts_ns_wall=txn.ts_ns_wall,\n                test_id=txn.test_id,\n                alpha0=txn.alpha0,\n                spent=txn.spent,\n                outcome=txn.outcome,\n                token=txn.token,\n                history=list(txn.history),\n                closed_ts_ns=txn.closed_ts_ns,\n            ) for",
      "tokens": 0,
      "firstFile": {
        "name": "core\\governance\\alpha_ledger.py",
        "start": 305,
        "end": 315,
        "startLoc": {
          "line": 305,
          "column": 2,
          "position": 2111
        },
        "endLoc": {
          "line": 315,
          "column": 4,
          "position": 2192
        }
      },
      "secondFile": {
        "name": "core\\governance\\alpha_ledger.py",
        "start": 283,
        "end": 295,
        "startLoc": {
          "line": 283,
          "column": 2,
          "position": 1918
        },
        "endLoc": {
          "line": 295,
          "column": 4,
          "position": 2001
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n        size = max(0.1, 10.0 + random.gauss(0.0, 3.0))\n        ts += max(0.0, random.expovariate(20.0))\n        out.append(Trade(timestamp=ts, price=100.0, size=size, side=Side.BUY if is_buy else Side.SELL))\n    return out\n\n\ndef _test_event_time_tfi_vpin",
      "tokens": 0,
      "firstFile": {
        "name": "core\\features\\tfi.py",
        "start": 217,
        "end": 224,
        "startLoc": {
          "line": 217,
          "column": 2,
          "position": 1852
        },
        "endLoc": {
          "line": 224,
          "column": 26,
          "position": 1946
        }
      },
      "secondFile": {
        "name": "core\\features\\tfi.py",
        "start": 203,
        "end": 210,
        "startLoc": {
          "line": 203,
          "column": 4,
          "position": 1654
        },
        "endLoc": {
          "line": 210,
          "column": 22,
          "position": 1748
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "@dataclass\n    class Trade:\n        timestamp: float\n        price: float\n        size: float\n        side: Side\n\n    @dataclass\n    class MarketSnapshot:\n        timestamp: float\n        bid_price: float\n        ask_price: float\n        bid_volumes_l: Sequence[float]\n        ask_volumes_l: Sequence[float]\n        trades: Sequence[Trade]\n\n        @property\n        def mid(self) -> float:\n            return 0.5 * (self.bid_price + self.ask_price)\n\n        @",
      "tokens": 0,
      "firstFile": {
        "name": "core\\features\\microstructure.py",
        "start": 39,
        "end": 59,
        "startLoc": {
          "line": 39,
          "column": 5,
          "position": 171
        },
        "endLoc": {
          "line": 59,
          "column": 2,
          "position": 298
        }
      },
      "secondFile": {
        "name": "core\\signal\\leadlag_hy.py",
        "start": 42,
        "end": 62,
        "startLoc": {
          "line": 42,
          "column": 5,
          "position": 191
        },
        "endLoc": {
          "line": 62,
          "column": 84,
          "position": 337
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ".append(MarketSnapshot(\r\n            timestamp=ts,\r\n            bid_price=bid,\r\n            ask_price=ask,\r\n            bid_volumes_l=[qb, 400, 300, 200, 100],\r\n            ask_volumes_l=[qa, 380, 280, 180, 80],\r\n            trades=tuple(tr for tr in trades if ts - tr.timestamp <= 5.0),\r\n        ))\r\n    \r\n    ab_high",
      "tokens": 0,
      "firstFile": {
        "name": "core\\features\\absorption.py",
        "start": 369,
        "end": 378,
        "startLoc": {
          "line": 369,
          "column": 11,
          "position": 4040
        },
        "endLoc": {
          "line": 378,
          "column": 8,
          "position": 4150
        }
      },
      "secondFile": {
        "name": "core\\features\\absorption.py",
        "start": 269,
        "end": 277,
        "startLoc": {
          "line": 269,
          "column": 6,
          "position": 2846
        },
        "endLoc": {
          "line": 277,
          "column": 7,
          "position": 2954
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "evt = {\r\n                        'order_id': oid,\r\n                        'ts': time.strftime('%Y-%m-%dT%H:%M:%S') + 'Z',\r\n                        'side': o.get('side'),\r\n                        'px': None,\r\n                        'qty': o['orig_qty'],\r\n                        'status': status,\r\n                        'reason': reason,\r\n                        'latency_ms_action': latency_action,\r\n                        'latency_ms_fill': None,\r\n                        'maker_queue_pos': None,\r\n                        'fill_qty_step': 0.0,\r\n                        'fill_ratio': 0.0,\r\n                        'slip_bps': None",
      "tokens": 0,
      "firstFile": {
        "name": "core\\execution\\sim_local_sink.py",
        "start": 167,
        "end": 180,
        "startLoc": {
          "line": 167,
          "column": 21,
          "position": 1826
        },
        "endLoc": {
          "line": 180,
          "column": 5,
          "position": 1950
        }
      },
      "secondFile": {
        "name": "core\\execution\\sim_local_sink.py",
        "start": 143,
        "end": 156,
        "startLoc": {
          "line": 143,
          "column": 21,
          "position": 1618
        },
        "endLoc": {
          "line": 156,
          "column": 5,
          "position": 1742
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ",\r\n                        'latency_ms_fill': None,\r\n                        'maker_queue_pos': None,\r\n                        'fill_qty_step': 0.0,\r\n                        'fill_ratio': 0.0,\r\n                        'slip_bps': None,\r\n                        'ttl_ms': self.ttl_ms,\r\n                    }\r\n                    self._emit_seed_if_needed(evt)\r\n                    self._ev.emit('ORDER_STATUS(sim)', evt)\r\n                    del self._orders[oid]\r\n                continue",
      "tokens": 0,
      "firstFile": {
        "name": "core\\execution\\sim_local_sink.py",
        "start": 331,
        "end": 342,
        "startLoc": {
          "line": 331,
          "column": 2,
          "position": 3612
        },
        "endLoc": {
          "line": 342,
          "column": 9,
          "position": 3704
        }
      },
      "secondFile": {
        "name": "core\\execution\\sim_local_sink.py",
        "start": 111,
        "end": 122,
        "startLoc": {
          "line": 111,
          "column": 15,
          "position": 1336
        },
        "endLoc": {
          "line": 122,
          "column": 7,
          "position": 1428
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": "if e_maker > 0.0 and p_fill >= self._min_p:\n                return RouteDecision(\n                    route=\"maker\",\n                    e_maker_bps=e_maker,\n                    e_taker_bps=e_taker,\n                    p_fill=p_fill,\n                    reason=f\"SLA denied taker, fallback to maker (E_maker={e_maker:.2f}bps, Pfill={p_fill:.2f})\",\n                    maker_fee_bps=self._fees.maker_fee_bps,\n                    taker_fee_bps=self._fees.taker_fee_bps,\n                    net_e_maker_bps=e_maker,\n                    net_e_taker_bps=e_taker,\n                    scores={\"expected_maker_bps\": e_maker, \"taker_bps\": e_taker, \"p_fill\": p_fill}\n                )\n\n            # Special-case: if P(fill) is very low (below taker threshold) but taker\n            # edge is positive, prefer taker despite SLA edge floor. Tests rely on\n            # this behaviour for low-P scenarios.\n            if p_fill < p_taker_threshold and e_taker > 0.0:\n                return RouteDecision(\n                    route=\"taker\",\n                    e_maker_bps=e_maker,\n                    e_taker_bps=e_taker,\n                    p_fill=p_fill,\n                    reason=f\"Low Pfill {p_fill:.2f} < {p_taker_threshold:.2f}; override SLA and prefer taker (E_taker={e_taker:.2f})\",\n                    maker_fee_bps=self._fees.maker_fee_bps,\n                    taker_fee_bps=self._fees.taker_fee_bps,\n                    net_e_maker_bps=e_taker",
      "tokens": 0,
      "firstFile": {
        "name": "core\\execution\\router_backup.py",
        "start": 247,
        "end": 273,
        "startLoc": {
          "line": 247,
          "column": 13,
          "position": 1743
        },
        "endLoc": {
          "line": 273,
          "column": 8,
          "position": 1944
        }
      },
      "secondFile": {
        "name": "core\\execution\\router_backup.py",
        "start": 215,
        "end": 241,
        "startLoc": {
          "line": 215,
          "column": 13,
          "position": 1503
        },
        "endLoc": {
          "line": 241,
          "column": 8,
          "position": 1704
        }
      }
    },
    {
      "format": "python",
      "lines": 37,
      "fragment": ",\n                maker_fee_bps=self._fees.maker_fee_bps,\n                taker_fee_bps=self._fees.taker_fee_bps,\n                net_e_maker_bps=maker_net,\n                net_e_taker_bps=taker_net,\n                scores={\"expected_maker_bps\": exp_maker, \"taker_bps\": taker_net, \"p_fill\": p_fill},\n            )\n\n        # Standard decision logic: choose route with higher expected edge\n        if taker_net >= exp_maker and taker_net > 0.0:\n            return RouteDecision(\n                route=\"taker\",\n                e_maker_bps=e_maker,\n                e_taker_bps=e_taker,\n                p_fill=p_fill,\n                reason=f\"E_taker {taker_net:.2f} ≥ E_maker {exp_maker:.2f}; SLA OK\",\n                maker_fee_bps=self._fees.maker_fee_bps,\n                taker_fee_bps=self._fees.taker_fee_bps,\n                net_e_maker_bps=maker_net,\n                net_e_taker_bps=taker_net,\n                scores={\"expected_maker_bps\": exp_maker, \"taker_bps\": taker_net, \"p_fill\": p_fill}\n            )\n        if exp_maker > taker_net and exp_maker > 0.0 and p_fill >= self._min_p:\n            return RouteDecision(\n                route=\"maker\",\n                e_maker_bps=e_maker,\n                e_taker_bps=e_taker,\n                p_fill=p_fill,\n                reason=f\"E_maker {exp_maker:.2f} > E_taker {taker_net:.2f}; Pfill {p_fill:.2f} ≥ {self._min_p:.2f}\",\n                maker_fee_bps=self._fees.maker_fee_bps,\n                taker_fee_bps=self._fees.taker_fee_bps,\n                net_e_maker_bps=maker_net,\n                net_e_taker_bps=taker_net,\n                scores={\"expected_maker_bps\": exp_maker, \"taker_bps\": taker_net, \"p_fill\": p_fill}\n            )\n\n        # None attractive - use correct net edges in the denial message",
      "tokens": 0,
      "firstFile": {
        "name": "core\\execution\\router_backup.py",
        "start": 361,
        "end": 397,
        "startLoc": {
          "line": 361,
          "column": 123,
          "position": 2715
        },
        "endLoc": {
          "line": 397,
          "column": 64,
          "position": 3015
        }
      },
      "secondFile": {
        "name": "core\\execution\\router_backup.py",
        "start": 309,
        "end": 345,
        "startLoc": {
          "line": 309,
          "column": 91,
          "position": 2256
        },
        "endLoc": {
          "line": 345,
          "column": 84,
          "position": 2556
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "def _clip01(x: float) -> float:\n    return 0.0 if x < 0.0 else (1.0 if x > 1.0 else x)\n\n\ndef _estimate_p_fill(fill_features: Dict[str, Any]) -> float:\n    \"\"\"\n    Простий, детермінований естіматор P(fill) із ознак:\n    - OBI in [-1,1] збільшує P\n    - spread_bps зменшує P (5 bps ~ -0.25 до P)\n    \"\"\"\n    obi = float(fill_features.get(\"obi\", 0.0))\n    spread_bps = float(fill_features.get(\"spread_bps\", 0.0))\n    p = 0.5 + 0.5 * obi - 0.05 * spread_bps\n    return _clip01(p)\n\n\nclass XaiLogger",
      "tokens": 0,
      "firstFile": {
        "name": "core\\execution\\router.py",
        "start": 66,
        "end": 82,
        "startLoc": {
          "line": 66,
          "column": 1,
          "position": 498
        },
        "endLoc": {
          "line": 82,
          "column": 10,
          "position": 643
        }
      },
      "secondFile": {
        "name": "core\\execution\\router_new.py",
        "start": 14,
        "end": 30,
        "startLoc": {
          "line": 14,
          "column": 1,
          "position": 80
        },
        "endLoc": {
          "line": 30,
          "column": 7,
          "position": 225
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ".get(\"sla\", {})\n        \n        self.edge_floor_bps: float = float(ex.get(\"edge_floor_bps\", 0.0))\n        self.p_min_fill: float = float(r.get(\"p_min_fill\", 0.25))\n        self.horizon_ms: int = int(r.get(\"horizon_ms\", 1500))\n        self.kappa_bps_per_ms: float = float(sla.get(\"kappa_bps_per_ms\", 0.0))\n        self.max_latency_ms: float = float(sla.get(\"max_latency_ms\", float(\"inf\")))\n        \n        # додаткові пороги\n        self.spread_deny_bps: float = float(r.get(\"spread_deny_bps\", 8.0))\n        self.maker_spread_ok_bps: float = float(r.get(\"maker_spread_ok_bps\", 2.0))\n        self.switch_margin_bps: float = float(r.get(\"switch_margin_bps\", 0.0))\n\n    def _init_from_modules",
      "tokens": 0,
      "firstFile": {
        "name": "core\\execution\\router.py",
        "start": 131,
        "end": 144,
        "startLoc": {
          "line": 131,
          "column": 3,
          "position": 985
        },
        "endLoc": {
          "line": 144,
          "column": 19,
          "position": 1193
        }
      },
      "secondFile": {
        "name": "core\\execution\\router_new.py",
        "start": 49,
        "end": 62,
        "startLoc": {
          "line": 49,
          "column": 2,
          "position": 313
        },
        "endLoc": {
          "line": 62,
          "column": 7,
          "position": 521
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "from core.config.loader import get_config, ConfigError\r\nfrom core.execution.exchange.common import Fees\r\nfrom core.tca.hazard_cox import CoxPH\r\nfrom core.tca.latency import SLAGate\r\n\r\n\r\n@dataclass\r\nclass QuoteSnapshot:\r\n    bid_px: float\r\n    ask_px: float\r\n    bid_sz: float = 0.0\r\n    ask_sz: float = 0.0\r\n    ts_ns: int = 0\r\n    spread_bps",
      "tokens": 0,
      "firstFile": {
        "name": "core\\execution\\enhanced_router.py",
        "start": 21,
        "end": 34,
        "startLoc": {
          "line": 21,
          "column": 1,
          "position": 62
        },
        "endLoc": {
          "line": 34,
          "column": 11,
          "position": 180
        }
      },
      "secondFile": {
        "name": "core\\execution\\router_backup.py",
        "start": 41,
        "end": 55,
        "startLoc": {
          "line": 41,
          "column": 1,
          "position": 57
        },
        "endLoc": {
          "line": 55,
          "column": 2,
          "position": 163
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "def __init__(\r\n        self,\r\n        *,\r\n        hazard_model: Optional[CoxPH] = None,\r\n        slagate: Optional[SLAGate] = None,\r\n        min_p_fill: Optional[float] = None,\r\n        fees: Optional[Fees] = None,\r\n        exchange_name: str = \"default\",\r\n    ) -> None:\r\n        # Core components",
      "tokens": 0,
      "firstFile": {
        "name": "core\\execution\\enhanced_router.py",
        "start": 82,
        "end": 91,
        "startLoc": {
          "line": 82,
          "column": 5,
          "position": 567
        },
        "endLoc": {
          "line": 91,
          "column": 18,
          "position": 666
        }
      },
      "secondFile": {
        "name": "core\\execution\\router_backup.py",
        "start": 82,
        "end": 91,
        "startLoc": {
          "line": 82,
          "column": 5,
          "position": 383
        },
        "endLoc": {
          "line": 91,
          "column": 10,
          "position": 473
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "def _flatten(d: Mapping[str, Any], prefix: str = \"\") -> Dict[str, Any]:\r\n    out: Dict[str, Any] = {}\r\n    for k, v in d.items():\r\n        key = f\"{prefix}.{k}\" if prefix else k\r\n        if isinstance(v, Mapping):\r\n            out.update(_flatten(v, key))\r\n        else:\r\n            out[key] = v\r\n    return out\r\n\r\n\r\ndef diff_dicts",
      "tokens": 0,
      "firstFile": {
        "name": "core\\config\\hotreload.py",
        "start": 35,
        "end": 46,
        "startLoc": {
          "line": 35,
          "column": 1,
          "position": 125
        },
        "endLoc": {
          "line": 46,
          "column": 11,
          "position": 273
        }
      },
      "secondFile": {
        "name": "core\\config\\loader.py",
        "start": 87,
        "end": 97,
        "startLoc": {
          "line": 87,
          "column": 1,
          "position": 905
        },
        "endLoc": {
          "line": 97,
          "column": 11,
          "position": 1051
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "a = _flatten(old)\r\n    b = _flatten(new)\r\n    changed: Set[str] = set()\r\n    keys = set(a.keys()).union(b.keys())\r\n    for k in keys:\r\n        if a.get(k) != b.get(k):\r\n            changed.add(k)\r\n    return changed\r\n\r\n# -------------------- Policy --------------------",
      "tokens": 0,
      "firstFile": {
        "name": "core\\config\\hotreload.py",
        "start": 48,
        "end": 57,
        "startLoc": {
          "line": 48,
          "column": 5,
          "position": 314
        },
        "endLoc": {
          "line": 57,
          "column": 51,
          "position": 424
        }
      },
      "secondFile": {
        "name": "core\\config\\loader.py",
        "start": 98,
        "end": 107,
        "startLoc": {
          "line": 98,
          "column": 5,
          "position": 1088
        },
        "endLoc": {
          "line": 107,
          "column": 66,
          "position": 1198
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "{\r\n                \"orders_placed\": self.metrics.orders_placed,\r\n                \"orders_filled\": self.metrics.orders_filled,\r\n                \"orders_cancelled\": self.metrics.orders_cancelled,\r\n                \"total_volume_usd\": self.metrics.total_volume_usd,\r\n                \"total_pnl_usd\": self.metrics.total_pnl_usd,\r\n                \"cancel_ratio\": self.metrics.cancel_ratio,\r\n                \"maker_fill_ratio\": self.metrics.maker_fill_ratio,\r\n                \"kill_switches_triggered\"",
      "tokens": 0,
      "firstFile": {
        "name": "core\\canary\\canary_system.py",
        "start": 353,
        "end": 361,
        "startLoc": {
          "line": 353,
          "column": 2,
          "position": 2971
        },
        "endLoc": {
          "line": 361,
          "column": 26,
          "position": 3059
        }
      },
      "secondFile": {
        "name": "core\\canary\\canary_system.py",
        "start": 274,
        "end": 282,
        "startLoc": {
          "line": 274,
          "column": 2,
          "position": 2297
        },
        "endLoc": {
          "line": 282,
          "column": 22,
          "position": 2385
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "def __init__(self, source_dir: str, test_command: str, timeout: int = 30):\n        self.source_dir = Path(source_dir)\n        self.test_command = test_command\n        self.timeout = timeout\n        self.mutants_created = 0\n        self.mutants_killed = 0\n        self.mutants_survived = 0\n\n    def get_python_files",
      "tokens": 0,
      "firstFile": {
        "name": "tools\\simple_mutator.py",
        "start": 21,
        "end": 29,
        "startLoc": {
          "line": 21,
          "column": 5,
          "position": 70
        },
        "endLoc": {
          "line": 29,
          "column": 17,
          "position": 161
        }
      },
      "secondFile": {
        "name": "tools\\ultra_simple_mutator.py",
        "start": 21,
        "end": 29,
        "startLoc": {
          "line": 21,
          "column": 5,
          "position": 67
        },
        "endLoc": {
          "line": 29,
          "column": 24,
          "position": 158
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": "# Calculate results\n        mutation_score = (self.mutants_killed / self.mutants_created * 100) if self.mutants_created > 0 else 0\n\n        results = {\n            \"total_files\": len(python_files),\n            \"total_mutants\": self.mutants_created,\n            \"killed_mutants\": self.mutants_killed,\n            \"survived_mutants\": self.mutants_survived,\n            \"mutation_score\": round(mutation_score, 2),\n            \"timestamp\": time.time()\n        }\n\n        print(\"\\n📊 Mutation Testing Results:\")\n        print(f\"   Total mutants: {results['total_mutants']}\")\n        print(f\"   Killed: {results['killed_mutants']}\")\n        print(f\"   Survived: {results['survived_mutants']}\")\n        print(f\"   Mutation score: {results['mutation_score']}%\")\n\n        return results\n\ndef main():\n    if len(sys.argv) < 3:\n        print(\"Usage: python simple_mutator.py <source_dir> <test_command>\"",
      "tokens": 0,
      "firstFile": {
        "name": "tools\\simple_mutator.py",
        "start": 209,
        "end": 231,
        "startLoc": {
          "line": 209,
          "column": 9,
          "position": 1641
        },
        "endLoc": {
          "line": 231,
          "column": 62,
          "position": 1816
        }
      },
      "secondFile": {
        "name": "tools\\ultra_simple_mutator.py",
        "start": 317,
        "end": 339,
        "startLoc": {
          "line": 317,
          "column": 9,
          "position": 1892
        },
        "endLoc": {
          "line": 339,
          "column": 68,
          "position": 2067
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "import argparse\nimport os\nimport subprocess\nimport sys\nimport time\nfrom pathlib import Path\n\n# Add project root to path\nROOT = Path(__file__).resolve().parent.parent\nif str(ROOT) not in sys.path:\n    sys.path.insert(0, str(ROOT))\n\n\ndef",
      "tokens": 0,
      "firstFile": {
        "name": "tools\\run_canary.py",
        "start": 13,
        "end": 26,
        "startLoc": {
          "line": 13,
          "column": 1,
          "position": 5
        },
        "endLoc": {
          "line": 26,
          "column": 4,
          "position": 87
        }
      },
      "secondFile": {
        "name": "tools\\run_live_testnet.py",
        "start": 17,
        "end": 29,
        "startLoc": {
          "line": 17,
          "column": 1,
          "position": 5
        },
        "endLoc": {
          "line": 29,
          "column": 5,
          "position": 86
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "import os\n        \n        filepath = self.session_dir / filename\n        \n        if not filepath.exists():\n            return\n        \n        # Get current file size\n        current_size = os.path.getsize(filepath)\n        last_pos = self.file_positions.get(filename, 0)\n        \n        # Check for file rotation (file became smaller)\n        if current_size < last_pos:\n            last_pos = 0  # Reset position\n        \n        try:\n            async",
      "tokens": 0,
      "firstFile": {
        "name": "tools\\live_feed.py",
        "start": 226,
        "end": 242,
        "startLoc": {
          "line": 226,
          "column": 9,
          "position": 1824
        },
        "endLoc": {
          "line": 242,
          "column": 6,
          "position": 1927
        }
      },
      "secondFile": {
        "name": "tools\\live_feed.py",
        "start": 195,
        "end": 210,
        "startLoc": {
          "line": 195,
          "column": 13,
          "position": 1606
        },
        "endLoc": {
          "line": 210,
          "column": 5,
          "position": 1707
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "try:\n                out = subprocess.check_output([\"netstat\", \"-ano\"], creationflags=0x08000000).decode(errors='ignore')\n                pids = []\n                for line in out.splitlines():\n                    if f\":{port} \" in line and \"LISTENING\" in line.upper():\n                        parts = line.split()\n                        if parts:\n                            pids.append(parts[-1])\n                for pid in set(pids):\n                    try:\n                        subprocess.call([\"taskkill\", \"/PID\", pid, \"/F\", \"/T\"], creationflags=0x08000000)\n                        killed",
      "tokens": 0,
      "firstFile": {
        "name": "tools\\auroractl.py",
        "start": 169,
        "end": 180,
        "startLoc": {
          "line": 169,
          "column": 13,
          "position": 1372
        },
        "endLoc": {
          "line": 180,
          "column": 7,
          "position": 1523
        }
      },
      "secondFile": {
        "name": "tools\\auroractl.py",
        "start": 57,
        "end": 68,
        "startLoc": {
          "line": 57,
          "column": 9,
          "position": 444
        },
        "endLoc": {
          "line": 68,
          "column": 7,
          "position": 595
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "f_raw = kelly_binary(p_cal, rr, risk_aversion=1.0, clip=(0.0, 0.2))\r\n        notional_target = f_raw * equity\r\n\r\n        # Mock exchange filters\r\n        px = 50000.0\r\n        lot_step = 0.00001\r\n        min_notional = 10.0\r\n        max_notional = 5000.0\r\n\r\n        qty = fraction_to_qty(notional_target, px, lot_step, min_notional, max_notional)\r\n\r\n        # Should return the correctly calculated quantity",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\test_sizing_live_integration.py",
        "start": 66,
        "end": 77,
        "startLoc": {
          "line": 66,
          "column": 9,
          "position": 464
        },
        "endLoc": {
          "line": 77,
          "column": 50,
          "position": 570
        }
      },
      "secondFile": {
        "name": "tests\\test_sizing_live_integration.py",
        "start": 28,
        "end": 39,
        "startLoc": {
          "line": 28,
          "column": 9,
          "position": 131
        },
        "endLoc": {
          "line": 39,
          "column": 13,
          "position": 237
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "import time\n        stabilizer = SizingStabilizer(min_resize_interval_sec=1.0)\n        \n        # Set last resize time to past\n        stabilizer.last_resize_time = time.monotonic() - 2.0\n        \n        # Call stabilize_fraction with different target and current to trigger line 540\n        result, metadata = stabilizer.stabilize_fraction(0.2, 0.1, apply_time_guard=True)\n        assert result == 0.2  # Should accept the change\n        assert metadata[\"final_fraction\"] == 0.2\n\n    def test_kelly_binary_safety_check_line_79",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\test_sizing_kelly.py",
        "start": 896,
        "end": 907,
        "startLoc": {
          "line": 896,
          "column": 9,
          "position": 7384
        },
        "endLoc": {
          "line": 907,
          "column": 39,
          "position": 7477
        }
      },
      "secondFile": {
        "name": "tests\\test_sizing_kelly.py",
        "start": 852,
        "end": 863,
        "startLoc": {
          "line": 852,
          "column": 9,
          "position": 7105
        },
        "endLoc": {
          "line": 863,
          "column": 39,
          "position": 7198
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "def test_portfolio_kelly_numpy_solve_exception_lines_434_442(self):\n        \"\"\"Test portfolio_kelly numpy solve exception handling (lines 434-442).\"\"\"\n        from unittest.mock import patch\n        import core.sizing.kelly as kelly_mod\n        \n        # Mock numpy.linalg.solve to raise an exception\n        with patch('numpy.linalg.solve', side_effect=Exception(\"Solve failed\")), \\\n             patch('numpy.linalg.pinv') as mock_pinv:\n            mock_pinv.return_value.dot.return_value = [0.5, 0.5]  # Mock pinv result\n            \n            mu = [0.02, 0.03]\n            Sigma = [[0.04, 0.01], [0.01, 0.09]]\n            \n            w = kelly_mod.portfolio_kelly(mu, Sigma)\n            assert len(w) == 2\n            # Should use pinv fallback (line 436)",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\test_sizing_kelly.py",
        "start": 951,
        "end": 966,
        "startLoc": {
          "line": 951,
          "column": 5,
          "position": 7957
        },
        "endLoc": {
          "line": 966,
          "column": 38,
          "position": 8113
        }
      },
      "secondFile": {
        "name": "tests\\test_sizing_kelly.py",
        "start": 800,
        "end": 815,
        "startLoc": {
          "line": 800,
          "column": 5,
          "position": 6622
        },
        "endLoc": {
          "line": 815,
          "column": 38,
          "position": 6778
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "sink = SimLocalSink(\n            cfg=self.base_config,\n            ev=self.mock_event_logger,\n            time_func=self.mock_time_func\n        )\n\n        market = {\n            'best_bid': 100.0,\n            'best_ask': 101.0,\n            'liquidity': {'bid': 10.0, 'ask': 10.0}\n        }\n\n        order = {\n            'order_id': 'test-124'",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\test_sim_local_sink.py",
        "start": 133,
        "end": 146,
        "startLoc": {
          "line": 133,
          "column": 9,
          "position": 979
        },
        "endLoc": {
          "line": 146,
          "column": 11,
          "position": 1066
        }
      },
      "secondFile": {
        "name": "tests\\test_sim_local_sink.py",
        "start": 94,
        "end": 107,
        "startLoc": {
          "line": 94,
          "column": 9,
          "position": 684
        },
        "endLoc": {
          "line": 107,
          "column": 11,
          "position": 771
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "sink = SimLocalSink(\n            cfg=self.base_config,\n            ev=self.mock_event_logger,\n            time_func=self.mock_time_func\n        )\n\n        market = {\n            'best_bid': 100.0,\n            'best_ask': 101.0,\n            'liquidity': {'bid': 10.0, 'ask': 10.0}\n        }\n\n        order = {\n            'order_id': 'test-125'",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\test_sim_local_sink.py",
        "start": 172,
        "end": 185,
        "startLoc": {
          "line": 172,
          "column": 9,
          "position": 1263
        },
        "endLoc": {
          "line": 185,
          "column": 11,
          "position": 1350
        }
      },
      "secondFile": {
        "name": "tests\\test_sim_local_sink.py",
        "start": 94,
        "end": 107,
        "startLoc": {
          "line": 94,
          "column": 9,
          "position": 684
        },
        "endLoc": {
          "line": 107,
          "column": 11,
          "position": 771
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "sink = SimLocalSink(\n            cfg=self.base_config,\n            ev=self.mock_event_logger,\n            time_func=self.mock_time_func\n        )\n\n        market = {\n            'best_bid': 100.0,\n            'best_ask': 101.0,\n            'liquidity': {'bid': 10.0, 'ask': 10.0}\n        }\n\n        order = {\n            'order_id': 'test-126'",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\test_sim_local_sink.py",
        "start": 209,
        "end": 222,
        "startLoc": {
          "line": 209,
          "column": 9,
          "position": 1527
        },
        "endLoc": {
          "line": 222,
          "column": 11,
          "position": 1614
        }
      },
      "secondFile": {
        "name": "tests\\test_sim_local_sink.py",
        "start": 94,
        "end": 107,
        "startLoc": {
          "line": 94,
          "column": 9,
          "position": 684
        },
        "endLoc": {
          "line": 107,
          "column": 11,
          "position": 771
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "sink = SimLocalSink(\n            cfg=self.base_config,\n            ev=self.mock_event_logger,\n            time_func=self.mock_time_func\n        )\n\n        market = {\n            'best_bid': 100.0,\n            'best_ask': 101.0,\n            'liquidity': {'bid': 10.0, 'ask': 10.0}\n        }\n\n        order = {\n            'order_id': 'test-sell-fill-price'",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\test_sim_local_sink.py",
        "start": 591,
        "end": 604,
        "startLoc": {
          "line": 591,
          "column": 9,
          "position": 4162
        },
        "endLoc": {
          "line": 604,
          "column": 23,
          "position": 4249
        }
      },
      "secondFile": {
        "name": "tests\\test_sim_local_sink.py",
        "start": 94,
        "end": 107,
        "startLoc": {
          "line": 94,
          "column": 9,
          "position": 684
        },
        "endLoc": {
          "line": 107,
          "column": 11,
          "position": 771
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "):\n        \"\"\"Test score calculation with features\"\"\"\n        model = ScoreModel(weights={\"feature1\": 0.5, \"feature2\": 0.3}, intercept=-0.1)\n        features = {\"feature1\": 1.0, \"feature2\": 2.0}\n        score = model.score_only(features)\n        assert isinstance(score, float)\n\n    def test_sigmoid_function(self",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\test_signal.py",
        "start": 20,
        "end": 27,
        "startLoc": {
          "line": 20,
          "column": 5,
          "position": 115
        },
        "endLoc": {
          "line": 27,
          "column": 5,
          "position": 197
        }
      },
      "secondFile": {
        "name": "tools\\mutation_test_standalone.py",
        "start": 17,
        "end": 25,
        "startLoc": {
          "line": 17,
          "column": 2,
          "position": 99
        },
        "endLoc": {
          "line": 25,
          "column": 2,
          "position": 181
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "):\n        \"\"\"Test reject function\"\"\"\n        p_values = [0.01, 0.02, 0.03, 0.04, 0.05]\n        rejected_mask, num_rejected = reject(p_values, alpha=0.05)\n        assert isinstance(rejected_mask, list)\n        assert isinstance(num_rejected, int)\n        assert len(rejected_mask) == len(p_values)\n        assert all(isinstance(r, bool) for r in rejected_mask)\n\n\nclass",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\test_signal.py",
        "start": 50,
        "end": 60,
        "startLoc": {
          "line": 50,
          "column": 5,
          "position": 407
        },
        "endLoc": {
          "line": 60,
          "column": 6,
          "position": 513
        }
      },
      "secondFile": {
        "name": "tools\\mutation_test_standalone.py",
        "start": 47,
        "end": 57,
        "startLoc": {
          "line": 47,
          "column": 2,
          "position": 377
        },
        "endLoc": {
          "line": 57,
          "column": 4,
          "position": 483
        }
      }
    },
    {
      "format": "python",
      "lines": 32,
      "fragment": "):\n        \"\"\"Test adding tick data\"\"\"\n        calculator = CrossAssetHY()\n        calculator.add_tick(\"SOL\", 1000.0, 50.0)\n        # Should not raise exception\n        assert True\n\n\n# Simple comparison tests for mutation testing\ndef test_simple_comparisons():\n    \"\"\"Simple tests that mutation testing can work with\"\"\"\n    x = 5\n    y = 10\n\n    # These comparisons will be mutated by our simple mutator\n    assert x < y\n    assert x != y\n    assert y > x\n    assert x <= 5\n    assert y >= 10\n\n\ndef test_boolean_logic():\n    \"\"\"Boolean logic tests for mutation testing\"\"\"\n    a = True\n    b = False\n\n    # These will be mutated (and/or operations)\n    assert a and not b\n    assert a or b\n    assert not (a and b)\n    assert (a or b) and True",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\test_signal.py",
        "start": 68,
        "end": 99,
        "startLoc": {
          "line": 68,
          "column": 5,
          "position": 561
        },
        "endLoc": {
          "line": 99,
          "column": 5,
          "position": 751
        }
      },
      "secondFile": {
        "name": "tools\\mutation_test_standalone.py",
        "start": 63,
        "end": 94,
        "startLoc": {
          "line": 63,
          "column": 2,
          "position": 519
        },
        "endLoc": {
          "line": 94,
          "column": 5,
          "position": 709
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "snapshot = {\"mid_price\": 50000.0, \"spread_bps\": 2.0, \"latency_ms\": 10.0}\r\n        account_state = {\"equity_usd\": 10000.0, \"positions\": {}}\r\n        \r\n        result = risk_guards.pre_trade_check(intent, snapshot, account_state)\r\n        \r\n        assert result.allow == False\r\n        assert result.why_code == \"WHY_RISK_GUARD_MAX_NOTIONAL\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\test_risk_guards_live.py",
        "start": 81,
        "end": 87,
        "startLoc": {
          "line": 81,
          "column": 9,
          "position": 753
        },
        "endLoc": {
          "line": 87,
          "column": 30,
          "position": 841
        }
      },
      "secondFile": {
        "name": "tests\\test_risk_guards_live.py",
        "start": 69,
        "end": 75,
        "startLoc": {
          "line": 69,
          "column": 9,
          "position": 594
        },
        "endLoc": {
          "line": 75,
          "column": 30,
          "position": 682
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "snapshot = {\"mid_price\": 50000.0, \"spread_bps\": 2.0, \"latency_ms\": 10.0}\r\n        account_state = {\"equity_usd\": 10000.0, \"positions\": {}}\r\n        \r\n        result = risk_guards.pre_trade_check(intent, snapshot, account_state)\r\n        \r\n        assert result.allow == False\r\n        assert result.why_code == \"WHY_RISK_GUARD_CVAR\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\test_risk_guards_live.py",
        "start": 98,
        "end": 104,
        "startLoc": {
          "line": 98,
          "column": 9,
          "position": 951
        },
        "endLoc": {
          "line": 104,
          "column": 22,
          "position": 1039
        }
      },
      "secondFile": {
        "name": "tests\\test_risk_guards_live.py",
        "start": 69,
        "end": 75,
        "startLoc": {
          "line": 69,
          "column": 9,
          "position": 594
        },
        "endLoc": {
          "line": 75,
          "column": 30,
          "position": 682
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "intent = {\"symbol\": \"BTCUSDT\", \"side\": \"buy\", \"qty\": 0.001, \"price\": 50000.0}\r\n        snapshot = {\"mid_price\": 50000.0, \"spread_bps\": 2.0, \"latency_ms\": 10.0}\r\n        account_state = {\"equity_usd\": 10000.0, \"positions\": {}}\r\n        \r\n        result = risk_guards.pre_trade_check(intent, snapshot, account_state)\r\n        \r\n        assert result.allow == False\r\n        assert result.why_code == \"WHY_RISK_GUARD_EVT\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\test_risk_guards_live.py",
        "start": 115,
        "end": 122,
        "startLoc": {
          "line": 115,
          "column": 9,
          "position": 1130
        },
        "endLoc": {
          "line": 122,
          "column": 21,
          "position": 1249
        }
      },
      "secondFile": {
        "name": "tests\\test_risk_guards_live.py",
        "start": 97,
        "end": 75,
        "startLoc": {
          "line": 97,
          "column": 9,
          "position": 920
        },
        "endLoc": {
          "line": 75,
          "column": 30,
          "position": 682
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "():\r\n    svc = importlib.import_module(\"api.service\")\r\n    app = svc.app\r\n    client = TestClient(app)\r\n\r\n    body = {\r\n        \"account\": {\"mode\": \"shadow\"},\r\n        \"order\": {\"symbol\": \"BTCUSDT\", \"side\": \"LONG\", \"qty\": 0.01, \"price\": 100.0},\r\n        \"market\": {\"latency_ms\": 1.0, \"score\": 0.0, \"a_bps\": 10.0, \"b_bps\": 10.0, \"spread_bps\": 1000.0",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\test_pretrade_models.py",
        "start": 25,
        "end": 33,
        "startLoc": {
          "line": 25,
          "column": 37,
          "position": 283
        },
        "endLoc": {
          "line": 33,
          "column": 7,
          "position": 408
        }
      },
      "secondFile": {
        "name": "tests\\test_pretrade_models.py",
        "start": 7,
        "end": 15,
        "startLoc": {
          "line": 7,
          "column": 37,
          "position": 34
        },
        "endLoc": {
          "line": 15,
          "column": 4,
          "position": 159
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "def write_jsonl(p: Path, rows):\r\n    p.parent.mkdir(parents=True, exist_ok=True)\r\n    with p.open('w', encoding='utf-8') as f:\r\n        for r in rows:\r\n            f.write(json.dumps(r) + \"\\n\")\r\n\r\n\r\ndef test_metrics_summary_enriched",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\test_metrics_summary_details.py",
        "start": 8,
        "end": 15,
        "startLoc": {
          "line": 8,
          "column": 1,
          "position": 44
        },
        "endLoc": {
          "line": 15,
          "column": 30,
          "position": 133
        }
      },
      "secondFile": {
        "name": "tests\\metrics\\test_metrics_summary.py",
        "start": 10,
        "end": 17,
        "startLoc": {
          "line": 10,
          "column": 1,
          "position": 42
        },
        "endLoc": {
          "line": 17,
          "column": 39,
          "position": 124
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "raw = [\r\n        {\"ts\": 100, \"type\": \"trade\", \"symbol\": \"BTCUSDT\", \"price\": 100.0, \"qty\": 0.5},\r\n        {\"ts\": 150, \"type\": \"trade\", \"symbol\": \"BTCUSDT\", \"price\": 101.0},  # invalid (missing size)\r\n        {\"ts\": 200, \"type\": \"trade\", \"symbol\": \"BTCUSDT\", \"price\": 102.0, \"qty\": 0.1, \"tag\": \"boom\"},\r\n    ]\r\n\r\n    def transform(evt):\r\n        if evt.get(\"tag\") == \"boom\":\r\n            raise RuntimeError(\"transform failure\")\r\n        return evt\r\n\r\n    clk = ManualClock(start_wall_ns=0)\r\n    r = Replay(source=raw, normalizer=Normalizer(strict=False), clock=clk, strict=False, pace=True)\r\n\r\n    # Should not raise any exceptions",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\test_ingestion_replay.py",
        "start": 118,
        "end": 132,
        "startLoc": {
          "line": 118,
          "column": 5,
          "position": 1455
        },
        "endLoc": {
          "line": 132,
          "column": 34,
          "position": 1669
        }
      },
      "secondFile": {
        "name": "tests\\test_ingestion_replay.py",
        "start": 72,
        "end": 86,
        "startLoc": {
          "line": 72,
          "column": 5,
          "position": 899
        },
        "endLoc": {
          "line": 86,
          "column": 4,
          "position": 1113
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "assert hasattr(decision, 'e_maker_bps')\n        assert hasattr(decision, 'e_taker_bps')\n        assert hasattr(decision, 'p_fill')\n        assert hasattr(decision, 'reason')\n        assert hasattr(decision, 'maker_fee_bps')\n        assert hasattr(decision, 'taker_fee_bps')\n        assert hasattr(decision, 'net_e_maker_bps')\n        assert hasattr(decision, 'net_e_taker_bps')\n\n    def",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\test_execution_router.py",
        "start": 292,
        "end": 301,
        "startLoc": {
          "line": 292,
          "column": 9,
          "position": 2393
        },
        "endLoc": {
          "line": 301,
          "column": 4,
          "position": 2482
        }
      },
      "secondFile": {
        "name": "tests\\unit\\test_xai_decision_trail.py",
        "start": 63,
        "end": 72,
        "startLoc": {
          "line": 63,
          "column": 9,
          "position": 414
        },
        "endLoc": {
          "line": 72,
          "column": 24,
          "position": 512
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "def __init__(self, responses=None):\r\n        self.responses = responses or {}\r\n        self.requests = []\r\n\r\n    def request(self, method, url, *, params=None, headers=None, json=None):\r\n        self.requests.append((method, url, params, headers, json))\r\n        # Return mock response based on URL pattern\r\n        for pattern, response in self.responses.items():\r\n            if pattern in url:\r\n                return response\r\n        return {}\r\n\r\n\r\ndef",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\test_exchange_adapters.py",
        "start": 28,
        "end": 41,
        "startLoc": {
          "line": 28,
          "column": 5,
          "position": 123
        },
        "endLoc": {
          "line": 41,
          "column": 4,
          "position": 276
        }
      },
      "secondFile": {
        "name": "tests\\test_unified_exchange_adapter.py",
        "start": 58,
        "end": 71,
        "startLoc": {
          "line": 58,
          "column": 5,
          "position": 268
        },
        "endLoc": {
          "line": 71,
          "column": 23,
          "position": 421
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "mc = MondrianConformalBinary(alpha=0.1)\n\n        p_hat = [0.8, 0.2, 0.9, 0.1]\n        y = [1, 0, 1, 0]\n        groups = [\"A\", \"A\", \"B\", \"B\"]\n\n        mc.fit(p_hat, y, groups)\n\n        # No group should use global scores",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\test_calibration_icp.py",
        "start": 226,
        "end": 234,
        "startLoc": {
          "line": 226,
          "column": 9,
          "position": 1759
        },
        "endLoc": {
          "line": 234,
          "column": 36,
          "position": 1842
        }
      },
      "secondFile": {
        "name": "tests\\test_calibration_icp.py",
        "start": 211,
        "end": 219,
        "startLoc": {
          "line": 211,
          "column": 9,
          "position": 1620
        },
        "endLoc": {
          "line": 219,
          "column": 41,
          "position": 1703
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "mc = MondrianConformalBinary(alpha=0.1)\n\n        p_hat = [0.8, 0.2, 0.9, 0.1]\n        y = [1, 0, 1, 0]\n        groups = [\"A\", \"A\", \"B\", \"B\"]\n\n        mc.fit(p_hat, y, groups)\n\n        # Test confident prediction for group A",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\test_calibration_icp.py",
        "start": 241,
        "end": 249,
        "startLoc": {
          "line": 241,
          "column": 9,
          "position": 1898
        },
        "endLoc": {
          "line": 249,
          "column": 40,
          "position": 1981
        }
      },
      "secondFile": {
        "name": "tests\\test_calibration_icp.py",
        "start": 211,
        "end": 219,
        "startLoc": {
          "line": 211,
          "column": 9,
          "position": 1620
        },
        "endLoc": {
          "line": 219,
          "column": 41,
          "position": 1703
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "# Add project root to sys.path\nPROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))\nif PROJECT_ROOT not in sys.path:\n    sys.path.insert(0, PROJECT_ROOT)\n\n\ndef find_free_port():\n    \"\"\"Find a free port for testing.\"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": "tests\\test_api_integration.py",
        "start": 15,
        "end": 22,
        "startLoc": {
          "line": 15,
          "column": 1,
          "position": 45
        },
        "endLoc": {
          "line": 22,
          "column": 36,
          "position": 113
        }
      },
      "secondFile": {
        "name": "tests\\test_api_validation.py",
        "start": 12,
        "end": 19,
        "startLoc": {
          "line": 12,
          "column": 1,
          "position": 33
        },
        "endLoc": {
          "line": 19,
          "column": 24,
          "position": 101
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "):\r\n    def request(\r\n        self,\r\n        method: str,\r\n        url: str,\r\n        *,\r\n        params: Optional[Mapping[str, object]] = None,\r\n        headers: Optional[Mapping[str, str]] = None,\r\n        json: Optional[object] = None,",
      "tokens": 0,
      "firstFile": {
        "name": "scripts\\run_live.py",
        "start": 55,
        "end": 63,
        "startLoc": {
          "line": 55,
          "column": 11,
          "position": 204
        },
        "endLoc": {
          "line": 63,
          "column": 2,
          "position": 295
        }
      },
      "secondFile": {
        "name": "core\\execution\\exchange\\common.py",
        "start": 233,
        "end": 129,
        "startLoc": {
          "line": 233,
          "column": 9,
          "position": 1724
        },
        "endLoc": {
          "line": 129,
          "column": 2,
          "position": 1048
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "try:\r\n            bid = float(str(bid_val)) if bid_val is not None else 0.0\r\n        except (ValueError, TypeError):\r\n            bid = 0.0\r\n        try:\r\n            ask = float(str(ask_val)) if ask_val is not None else 0.0\r\n        except (ValueError, TypeError):\r\n            ask = 0.0\r\n        return Book(bid=bid, ask=ask)\r\n    raise",
      "tokens": 0,
      "firstFile": {
        "name": "scripts\\run_live.py",
        "start": 123,
        "end": 132,
        "startLoc": {
          "line": 123,
          "column": 9,
          "position": 1119
        },
        "endLoc": {
          "line": 132,
          "column": 6,
          "position": 1241
        }
      },
      "secondFile": {
        "name": "scripts\\run_live.py",
        "start": 101,
        "end": 110,
        "startLoc": {
          "line": 101,
          "column": 9,
          "position": 796
        },
        "endLoc": {
          "line": 110,
          "column": 3,
          "position": 918
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "def _get_nested(d: dict, parts: list):\r\n            cur = d\r\n            for p in parts:\r\n                if not isinstance(cur, dict) or p not in cur:\r\n                    return None\r\n                cur = cur[p]\r\n            return cur\r\n\r\n        def _set_nested(d: dict, parts: list, value):\r\n            cur = d\r\n            for p in parts[:-1]:\r\n                if p not in cur or not isinstance(cur[p], dict):\r\n                    cur[p] = {}\r\n                cur = cur[p]\r\n            cur[parts[-1]] = value\r\n\r\n        def _find_best_split_and_set(base: dict, key: str, value):\r\n            parts",
      "tokens": 0,
      "firstFile": {
        "name": "scripts\\run_live.py",
        "start": 161,
        "end": 178,
        "startLoc": {
          "line": 161,
          "column": 9,
          "position": 1654
        },
        "endLoc": {
          "line": 178,
          "column": 6,
          "position": 1878
        }
      },
      "secondFile": {
        "name": "scripts\\run_replay.py",
        "start": 203,
        "end": 222,
        "startLoc": {
          "line": 203,
          "column": 5,
          "position": 1933
        },
        "endLoc": {
          "line": 222,
          "column": 48,
          "position": 2157
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ") as fh:\r\n            fh.write(f\"APPLIED PROFILE: {args.profile}\\n\")\r\n            fh.write(\"CHANGED KEYS:\\n\")\r\n            for p in changed:\r\n                old = before\r\n                for part in p.split('.'):\r\n                    old = old.get(part, None) if isinstance(old, dict) else None\r\n                new = cfg\r\n                for part in p.split('.'):\r\n                    new = new.get(part, None) if isinstance(new, dict) else None\r\n                fh.write(f\"- {p}: {old!r} -> {new!r}\\n\")\r\n        print(f\"PROFILE: applied {args.profile} -> {out_path}\")\r\n\r\n    http",
      "tokens": 0,
      "firstFile": {
        "name": "scripts\\run_live.py",
        "start": 221,
        "end": 234,
        "startLoc": {
          "line": 221,
          "column": 8,
          "position": 2410
        },
        "endLoc": {
          "line": 234,
          "column": 5,
          "position": 2577
        }
      },
      "secondFile": {
        "name": "scripts\\run_replay.py",
        "start": 287,
        "end": 300,
        "startLoc": {
          "line": 287,
          "column": 8,
          "position": 2830
        },
        "endLoc": {
          "line": 300,
          "column": 9,
          "position": 2997
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "ece = 0.0 if self.ece is None else float(self.ece)\r\n        logloss = 0.0 if self.logloss is None else float(self.logloss)\r\n        return math.exp(-eta * ece) * math.exp(-zeta * logloss)\r\n\r\n\r\n@dataclass",
      "tokens": 0,
      "firstFile": {
        "name": "core\\types.py",
        "start": 182,
        "end": 187,
        "startLoc": {
          "line": 182,
          "column": 9,
          "position": 1448
        },
        "endLoc": {
          "line": 187,
          "column": 11,
          "position": 1535
        }
      },
      "secondFile": {
        "name": "core\\calibration\\calibrator.py",
        "start": 40,
        "end": 43,
        "startLoc": {
          "line": 40,
          "column": 13,
          "position": 229
        },
        "endLoc": {
          "line": 43,
          "column": 13,
          "position": 313
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "if not (0.0 <= p <= 1.0):\r\n        raise ValueError(\"p must be in [0,1]\")\r\n    if G < 0 or L < 0:\r\n        raise ValueError(\"G and L must be non-negative\")\r\n    return p * G - (1.0 - p) * L - c\r\n\r\n\r\ndef p_star_threshold(r: float, c_prime: float, delta: float = 0.0) -> float:\r\n    \"\"\"Minimal calibrated probability to enter, given payoff ratio r=G/L and c' = c/L.\r\n    p* = (1 + c') / (1 + r). A practical buffer δ≥0 can be added: p > p* + δ.\r\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": "core\\types.py",
        "start": 292,
        "end": 302,
        "startLoc": {
          "line": 292,
          "column": 5,
          "position": 2555
        },
        "endLoc": {
          "line": 302,
          "column": 8,
          "position": 2676
        }
      },
      "secondFile": {
        "name": "core\\tca\\edge_budget.py",
        "start": 28,
        "end": 36,
        "startLoc": {
          "line": 28,
          "column": 5,
          "position": 97
        },
        "endLoc": {
          "line": 36,
          "column": 66,
          "position": 218
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "if r <= 0:\r\n        raise ValueError(\"r must be > 0\")\r\n    if c_prime < 0:\r\n        raise ValueError(\"c' must be ≥ 0\")\r\n    base = (1.0 + c_prime) / (1.0 + r)\r\n    return min(1.0, max(0.0, base + max(0.0, delta)))\r\n\r\n\r\ndef latency_degradation",
      "tokens": 0,
      "firstFile": {
        "name": "core\\types.py",
        "start": 303,
        "end": 311,
        "startLoc": {
          "line": 303,
          "column": 5,
          "position": 2680
        },
        "endLoc": {
          "line": 311,
          "column": 20,
          "position": 2777
        }
      },
      "secondFile": {
        "name": "core\\tca\\edge_budget.py",
        "start": 37,
        "end": 45,
        "startLoc": {
          "line": 37,
          "column": 5,
          "position": 222
        },
        "endLoc": {
          "line": 45,
          "column": 22,
          "position": 319
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ") or \"\").upper()\r\n        oid = str(kwargs.get(\"order_id\") or kwargs.get(\"orderId\") or \"\")\r\n        if status in TERMINAL_STATES and oid:\r\n            key = (\"TERM\", oid, status)\r\n            if self._seen_cid_ts.contains(key):\r\n                return\r\n            self._seen_cid_ts.add(key)\r\n        self._write(self._w_failed",
      "tokens": 0,
      "firstFile": {
        "name": "core\\order_logger.py",
        "start": 332,
        "end": 339,
        "startLoc": {
          "line": 332,
          "column": 15,
          "position": 3752
        },
        "endLoc": {
          "line": 339,
          "column": 10,
          "position": 3860
        }
      },
      "secondFile": {
        "name": "core\\order_logger.py",
        "start": 311,
        "end": 318,
        "startLoc": {
          "line": 311,
          "column": 9,
          "position": 3424
        },
        "endLoc": {
          "line": 318,
          "column": 11,
          "position": 3532
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "s = str(ev.get(\"status\") or ev.get(\"state\") or ev.get(\"lifecycle\") or \"\").upper()\r\n        if s:\r\n            seen.add(s)\r\n    for s in priority:\r\n        if s in seen:\r\n            return s\r\n    return \"UNKNOWN\"",
      "tokens": 0,
      "firstFile": {
        "name": "core\\order_lifecycle.py",
        "start": 28,
        "end": 34,
        "startLoc": {
          "line": 28,
          "column": 9,
          "position": 203
        },
        "endLoc": {
          "line": 34,
          "column": 10,
          "position": 291
        }
      },
      "secondFile": {
        "name": "core\\order_logger.py",
        "start": 377,
        "end": 383,
        "startLoc": {
          "line": 377,
          "column": 9,
          "position": 4287
        },
        "endLoc": {
          "line": 383,
          "column": 10,
          "position": 4375
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "(\r\n        ts_iso=_get_ts_iso(snapshot),\r\n        decision_id=decision_id or '',\r\n        order_id=str(d.get('order_id') or d.get('id') or ''),\r\n        symbol=str(d.get('symbol') or ''),\r\n        side=str(d.get('side') or ''),\r\n        qty=float(d.get('qty') or d.get('amount') or 0.0),\r\n        error_code",
      "tokens": 0,
      "firstFile": {
        "name": "core\\converters.py",
        "start": 108,
        "end": 115,
        "startLoc": {
          "line": 108,
          "column": 12,
          "position": 1118
        },
        "endLoc": {
          "line": 115,
          "column": 11,
          "position": 1237
        }
      },
      "secondFile": {
        "name": "core\\converters.py",
        "start": 84,
        "end": 91,
        "startLoc": {
          "line": 84,
          "column": 13,
          "position": 685
        },
        "endLoc": {
          "line": 91,
          "column": 10,
          "position": 804
        }
      }
    }
  ],
  "filename": "C:\\Users\\user\\AppData\\Local\\npm-cache\\_npx\\652ead47bf63fe99\\node_modules\\@jscpd\\html-reporter\\dist\\templates\\main.pug"
}
